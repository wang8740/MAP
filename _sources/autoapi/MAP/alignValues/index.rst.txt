MAP.alignValues
===============

.. py:module:: MAP.alignValues


Classes
-------

.. autoapisummary::

   MAP.alignValues.AlignValues


Module Contents
---------------

.. py:class:: AlignValues(value_list, file_path, c_list=None)

   .. py:attribute:: file_path


   .. py:method:: optimize_lambda(lambda_init=None, optimize_indices=None, verbose=True)


   .. py:method:: dual_objective(lambda_vals)


   .. py:method:: sequential_optimize_lambda(lambda_init=None)


   .. py:method:: sequential_optimize_lambda_multiround()


   .. py:method:: find_pareto_by_interpolation(c_low, c_high)


   .. py:method:: find_pareto_by_oneValue(value_to_enhance)


   .. py:method:: save_results_to_text(optimized_lambda, success, save_prefix='results/alignValues')

      Save the results to text file. This is used to generate the results file and save it to disk

      :param optimized_lambda: list of optimized lambda values
      :param success: True if success False if failure ( NaN in case of failure



   .. py:method:: save_results_to_csv(optimized_lambda, dirichlet_lambda, save_prefix='results/alignValues')

      Save the results to a CSV file. This function appends new data each time it's called.

      :param optimized_lambda: list of optimized lambda values
      :param dirichlet_lambda: list of Dirichlet reference lambda values
      :param save_prefix: prefix for the save file path



   .. py:method:: gen_rand_MAP_lambda(num_lambda, scaling_MAX, save_prefix='rand_MAP_lambda')

      Generate random MAP lambda values by drawing each c_i randomly between the current c_i
      and the maximum reward corresponding to value i. This function modifies the c values,
      recalculates lambda, and returns a list of lambda values constrained by scaling_MAX.

      :param num_lambda: Number of valid lambda values to generate
      :param scaling_MAX: Maximum allowed L1 norm for the generated lambda values
      :return: Tuple containing list of generated lambda values and success rate



