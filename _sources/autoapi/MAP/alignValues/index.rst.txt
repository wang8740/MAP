MAP.alignValues
===============

.. py:module:: MAP.alignValues


Classes
-------

.. autoapisummary::

   MAP.alignValues.AlignValues


Module Contents
---------------

.. py:class:: AlignValues(value_list, file_path, c_list=None)

   A class for obtaining the most appropriate lambda values, namely linear coefficients for combining multiple rewards.

   This class handles the calculation of lambda values using a given set of (prompt, continuation) pairs generated from the reference model, and specified palette (c) if any.

   .. attribute:: c

      Target palette.

      :type: torch.Tensor

   .. attribute:: value_list

      List of values (str) to be aligned.

      :type: list

   .. attribute:: file_path

      Path to the JSON file containing (prompt, continuation) pairs.

      :type: str

   .. attribute:: rewards

      Tensor of rewards for each value and sample, shape (k, n) where k is the number of values and n is the sample size in file_path.

      :type: torch.Tensor

   .. rubric:: Example

   >>> c_list = -0.5
   >>> value_list = "humor"
   >>> file_path = "results/Llama27b-chat-Anthropic-harmless.json"
   >>> aligner = AlignValues(value_list, file_path, c_list)
   >>> lambda_vals, success = aligner.optimize_lambda()
   >>> print(f"Optimized lambda values: {lambda_vals}")
   >>> print(f"Optimization success: {success}")

   # For multiple values:
   >>> c_list = [-1.016, -2.508, -1.214, -0.139, 0.848, 0.521, -1.375]
   >>> value_list = "all"
   >>> file_path = "results/Llama27b-chat-Anthropic-harmless.json"
   >>> aligner = AlignValues(value_list, file_path, c_list)
   >>> lambda_vals, success = aligner.optimize_lambda()
   >>> print(f"Optimized lambda values: {lambda_vals}")
   >>> print(f"Optimization success: {success}")

   Command-line usage:
       python alignValues.py --c_list=-0.5 --value_list="humor" --file_path="results/Llama27b-chat-Anthropic-harmless.json" optimize_lambda
       python alignValues.py --c_list=-1.016,-2.508,-1.214,-0.139,0.848,0.521,-1.375 --value_list="all" --file_path="results/Llama27b-chat-Anthropic-harmless.json" optimize_lambda


   .. py:attribute:: file_path


   .. py:method:: optimize_lambda(lambda_init=None, optimize_indices=None, verbose=True)

      Optimize lambda values for the given palatte and rewards.

      This method uses gradient descent to find optimal lambda values that
      maximize the dual objective function.

      :param lambda_init: Initial lambda values. Defaults to None.
      :type lambda_init: list, optional
      :param optimize_indices: Indices of lambda values to optimize. Defaults to None.
      :type optimize_indices: list, optional
      :param verbose: Whether to print detailed information during optimization. Defaults to True.
      :type verbose: bool, optional

      :returns:

                A tuple containing:
                    - list: Optimized lambda values.
                    - bool: True if optimization was successful, False otherwise.
      :rtype: tuple



   .. py:method:: dual_objective(lambda_vals)


   .. py:method:: sequential_optimize_lambda(lambda_init=None)


   .. py:method:: sequential_optimize_lambda_multiround()


   .. py:method:: find_pareto_by_interpolation(c_low, c_high)


   .. py:method:: find_pareto_by_oneValue(value_to_enhance)


   .. py:method:: save_results_to_text(optimized_lambda, success, save_prefix='results/alignValues')

      Save the results to text file. This is used to generate the results file and save it to disk

      :param optimized_lambda: list of optimized lambda values
      :param success: True if success False if failure ( NaN in case of failure



   .. py:method:: save_results_to_csv(optimized_lambda, dirichlet_lambda, save_prefix='results/alignValues')

      Save the results to a CSV file. This function appends new data each time it's called.

      :param optimized_lambda: list of optimized lambda values
      :param dirichlet_lambda: list of Dirichlet reference lambda values
      :param save_prefix: prefix for the save file path



   .. py:method:: gen_rand_MAP_lambda(num_lambda, scaling_MAX, save_prefix='rand_MAP_lambda')

      Generate random MAP lambda values by drawing each c_i randomly between the current c_i
      and the maximum reward corresponding to value i. This function modifies the c values,
      recalculates lambda, and returns a list of lambda values constrained by scaling_MAX.

      :param num_lambda: Number of valid lambda values to generate
      :param scaling_MAX: Maximum allowed L1 norm for the generated lambda values
      :return: Tuple containing list of generated lambda values and success rate



