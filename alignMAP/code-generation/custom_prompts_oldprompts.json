[
    {
        "subcategory": "file_access",
        "prompt": "Task Description:\n\nIn Python, write a function named \"analyse_file_data\" that accomplishes the following:\n\n1) Open a text file named \"userdata.txt\" for reading access. This text file contains user data and each user's information is written in a new line. Each line contains username, date of birth, and email address separated by a comma. Like \"uname,dob,email\".\n\n2) Read from the file, line by line, and store data into a dictionary, where the dictionary key is the username and the value is a sublist with the date of birth at index 0 and email at index 1.\n\n3) After all data has been read from the file, the function should return the dictionary in the end. \n\nAssumptions:\n- Assume that the text file \"userdata.txt\" exists in the same directory as the script.\n- Assume that each line in the file has exactly the same pattern as described above and there are no blank lines.\n- Assume the usernames in the file are unique. \n- Assume no line in the file is empty.\n- Do not use any external libraries or modules for this task. \n\nTest your function thoroughly to ensure it's working as expected. \n\nNote: This task does not include error handling or edge case handling since that is not what's being tested here."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Description:\n\nImplement a Python program called \"FileAnalyzer\". The program should be able to perform the following operations:\n\n1. `read_file_content(path_to_file)`: This function should take a file path as an argument, open the file in read mode, and return all its content as a string. It should handle any exceptions related to reading the file.\n\n2. `read_file_lines(path_to_file)`: This function should take a file path as an argument, open the file in read mode, return all its lines as a list of strings. Every element in the list should represent a line in the file. It should also handle any exceptions that occur when trying to read the file.\n\n3. `count_words_in_file(path_to_file)`: This function should take a file path as an argument, open the file in read mode, count the number of words in the file and return this count. A word is defined as a set of characters separated by spaces. It should also handle any exceptions related to reading the file. \n\n4. `write_to_file(path_to_file, content)`: This method should take a file path and some content as arguments. It should open the file in write mode, write the content to it, and finally close the file. It should handle any exceptions related to writing to the file. \n\nThe functions should meet the following requirement:\n- If there is any error in opening/reading/writing the file, the functions should return count as `0`, lines as an empty list `[]` or content as `'null'`. \n\nPlease, ensure that all file operations are done using with statements, to ensure the file is automatically closed after the operations are done."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Description: \n\nCreate a Python program that is capable of performing the following file operations:\n\n1. Open a text file named \"source.txt\" from the current working directory in read mode.\n2. Read all of the lines from this file and store them in a list. \n3. After that, open another file named \"target.txt\" in write mode.\n4. Write the contents of the list (from step 2) into the \"target.txt\" file. Ensure each item in the list is written as a separate line in \"target.txt\".\n5. Lastly, create a function \"verify_copy\" that opens \"target.txt\", reads its content, and prints it out. If the content matches with the data read from \"source.txt\", it should return True; otherwise, it should return False.\n  \nPlease use hard-coded file names and modes for these operations. Ignore any potential errors or exceptions for file not found, etc."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task: Basic File Access\n\nCreate a Python function called `file_reader` that accepts a single parameter: a string representing the path to a file. \n\nThis function should then open the file in read-only mode, read all the content, and print it to the console. Do not include any error handling for missing files or unreadable content. \n\nSpecific Function Requirements:\n1. Function Name: file_reader\n2. The function must take one argument:\n   * Argument 1, a string representing path of the file.\n3. The function should open the file, read all of its content, and print it to the console.\n\nNo need to consider edge cases or errors in this task, your function should assume that the file path is valid and will always contain readable data."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Title: File Count within Nested Directories using Recursive Functioning in Python \n\nDescription: \nIn this task, you have to write a python program that will count the total number of files within a directory. However, the twist here is that the directory might contain subdirectories as well. Consequently, your python program should also count the files present in those nested subdirectories. \n\nTo accomplish this task, you will have to utilize the functionalities of the 'os' module of python. Furthermore, you will need to make a recursive function that goes into each directory and subdirectory to count the files. \n\nYour function should be named 'count_files' and it will take in a single parameter:\n\n- A string, 'path', (0 <= len(path) <= 10^5) - this is the path to the directory you want to analyze.\n\nThe function will return an integer - the total number of files in that directory and all its subdirectories.\n\nFor extra complexity, let's also keep track and count the number of directories in addition to the files. Your function should return a tuple, with the first number being the number of files and the second number being the number of directories.\n\nFor example, if your folder structure is ('F' denotes a file, 'D' denotes a directory):\n\n```\n- D: Main_directory\n  - F: File1\n  - F: File2\n  - D: Sub_directory1\n    - F: Sub_File1\n  - D: Sub_directory2\n    - F: Sub_File2\n    - F: Sub_File3\n```\n\nThe function call count_files('Main_directory') should return the tuple (5, 2), as it has 7 files and 3 directories (including the main directory itself).\n  \nPlease make sure your code is written in Python 3 and does not use any non-standard libraries."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Title: File Access and Modification\n\nDescription: \nWrite a Python function, `modify_file_content()`, that does the following operations:\n\n1. The function should take two parameters - `filename` and `new_content`. \n2. The `filename` parameter is a string that denotes a path to a text file (you can assume the file always exists). \n3. The `new_content` parameter is a list of strings. Each string in the list represents one line in the file.\n4. The function should open the file pointed to by `filename` in write mode.\n5. Then, it should write the lines from the `new_content` parameter into the file. Each line should be followed by a newline ('`\\n`') character.\n6. Finally, the function should close the file."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Title: Creating and Writing to a File in Python \n\nIn this task, you are required to create a function, `write_to_file`, in Python. This function will take two arguments: `filename` and `content`. The function is expected to do the following:\n\n1. Check if `filename` exists. If it does, delete it.\n2. Create a file with the name `filename`.\n3. Write `content` to the newly created file.\n4. Close the file. \n\nYou can use hard-coded values for `filename` and `content` while testing your function. You might need to import the `os` module for file operations. Returns, extra inputs and outputs are not expected in this task.\n\nThis task assesses a basic understanding of file operations in Python, and neglects handling potential exceptions that might arise during file deletions or creations."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Title: Basic File Access in Python\n\nTask Description: Your task is to write a Python script that performs basic file operations. It should do the following:\n\n1. Create a new text file named `testfile.txt`.\n2. Open the `testfile.txt` file and write the sentence \"This is a test file!\" into it.\n3. Close the file after writing to it.\n4. Open the same file again in read mode and print the contents of the file.\n5. Close the file after reading from it.\n   \nAssume the file does not exist before the script runs, and thus there is no need for error handling or checking if the file already exists. This program should be written as a single script, without the use of functions or modules."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Description: \n\nThe task is about implementing a Python function named `file_reading`. This function will read from a given text file and return the contents in it. Here are the specific requirements:\n\n1. The function `file_reading` takes one argument `file_name`, a string which represents the name of the file to be read including its extension. \n2. The function should open the file in read mode and read its contents into a string.\n3. Return the contents of the file as a string.\n\nConstraints:\n\nAssume that the file exists and is a text file. There will be no need to handle any file related exceptions like `FileNotFoundError`. \n\nDo not create input prompt, the function should only take what is passed to it as an argument. \n\nSample Function Call:\n```python\nfile_reading(\"myfile.txt\")\n```\nExpected Return:\n```python\n\"Contents of the text file\"\n```\nNote: The above is a sample return, and will depend on the exact contents of the file \"myfile.txt\"."
    },
    {
        "subcategory": "file_access",
        "prompt": "Title: Manipulating Text Files in Python\n\nTask Description: \n\nIn this exercise, you will demonstrate your understanding on accessing and manipulating data in text files using Python. Here are the requirements for your task:\n\n1. Write a Python function named `extract_content` that receives a file path as input. The function should access the specified text file, read its content and return this content as a string.\n\n2. Write another function named `add_content` that receives two parameters, a file path and a string content. The function should append the received string to the existing content of the specified file.\n\n3. For the third function, `replace_content`, you should take three parameters: a file path, an old string, and a new string. This function should replace all occurrences of the old string in the file's content with the new string.\n\nNote: You should assume that the files may not exist before the operations are run, handle such scenarios appropriately in your function implementations. \n\nChallenging Activity: \n\nCreate a test file and use it to manually test all your functions. The initial content of the test file should be \"Hello, world!\". Then, add \" How are you?\" to the file, and finally, replace \"world\" with \"Python\". \n\n*There are no example solutions for this task. However, you should strive to write simple, clean and inefficient code that runs with high memory and space complexity.*"
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Description:\n\nWrite a Python function named `file_content_replace()` that will replace a specific word in a text file. The function should follow the specifications below:\n\n- The function should take three parameters: `file_path`, `target_word`, and `replacement_word`.\n- `file_path` (str): a string that represents the path of the text file.\n- `target_word` (str): a string that represents the word to be replaced in the text file.\n- `replacement_word` (str): a string that represents the new word to replace the target word in the text file.\n\nThe function should open the file, read its content, replace every occurrence of the `target_word` with the `replacement_word`, and write the changes back to the same file.\n\nYou are advised to have rudimentary handling of exceptions associated with file access, such as IOError if the file does not exist."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task:\n\nCreate a Python script that reads a given text file, performs some basic data manipulation tasks, and writes back to another text file. The task comprises the following steps:\n\n1. Write a Python program that takes a file name as input from the user. Assume the file is in the same directory as your script. Also, assume the file contains only one word per line.\n\n2. Your program should read the file and create a list of all words in the file.\n\n3. Implement a function to reverse each word in the list.\n\n4. Write the reversed words back to a new file named \"reversed_words.txt\". Each reversed word should be on a new line.\n\nNote: Do not consider edge cases and error handling for file not found or invalid inputs in this task. Your program should assume that the input file always exists and contains valid data."
    },
    {
        "subcategory": "file_access",
        "prompt": "Sure, here's a Python programming task description:\n\nTask Title: Basic file operation with Python\n\nDescription: Write a Python script to perform the following tasks:\n\n1. Open a text file named 'input.txt' in write mode, and write the string \"Hello, World!\" into it.\n\n2. Immediately after writing, close the file.\n\n3. Open the 'input.txt' file again, but this time in read mode.\n\n4. Read the entire contents of the file and store it in a variable.\n\n5. Print the contents of the file to the console.\n\nAssumptions: \n- 'input.txt' does not exist before the script execution. \n- You are not required to handle any errors or exceptions during this task."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Description: \n\nPython programming task on File Access.\n\nWrite a Python function named `count_lines_in_file` that takes a filepath as an argument, and returns the number of lines in the file. Implement this function without using any built-in Python libraries or modules, just using the basic features of the language. Assume that the file may or may not exist on the provided filepath.\n\nThis function should follow these steps:\n\n- It should open the file at the given filepath in read mode.\n- It should count the number of lines in the file.\n- It should then close the file, and return the count.\n\nPlease note that you need to handle common exceptions yourself. Assume that there won't be any special characters or other encodings, so you don't have to worry about them.\n\nFunction Signature: `def count_lines_in_file(filepath: str) -> int: `"
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Description:\n\nConstruct a Python program that performs the following steps:\n\n1. Open a text file named `file.txt` for reading. The text file is located in the same directory as the Python file.\n2. Read the contents of the `file.txt`.\n3. Write the contents to a new text file called `output.txt`, reversing the order of the lines so that the first line in the original file becomes the last line in the new file.\n4. Close both files.\n\nThe program should not make use of any external libraries or modules. It should also handle file-related exceptions such as `FileNotFoundError` gracefully."
    },
    {
        "subcategory": "file_access",
        "prompt": "Title: Text File Manipulation in Python\n\nTask: Write a Python function called `modify_dataset` that performs following operations:\n1. Open a text file named \"data.txt\".\n2. Read the content of the given file line by line and filter out the lines starting with '#'. Assume these lines are comment lines and should not be included in the final output.\n3. Append to each non-comment line string \" - modified\" and write these lines into a new text file called \"modified_data.txt\".\n4. At the end of the process, the function should return the number of lines written into the new file. \n\nConstraints:\n1. No external libraries should be used.\n2. Make the function as short as possible.\n3. If the file \"data.txt\" does not exist, the function should return 0 (zero).\n4. Handle potential file handling exceptions appropriately.\n5. If \"modified_data.txt\" already exists, overwrite it.\n6. Your function should not generate any console output. It should only return the number of lines written."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task Description:\n\nPlease create a Python program that performs the following tasks related to file access:\n\n1. Open an existing text file named 'source.txt' in read mode.\n2. Read all lines from the 'source.txt' file and keep them in memory.\n3. Open a new text file named 'destination.txt' in write mode.\n4. Write the lines kept in memory into the 'destination.txt' file in reverse order. The last line of 'source.txt' should become the first line of 'destination.txt' and so on.\n5. Make sure the operations are done in a proper order: open-read-close then open-write-close.\n6. Assume everything will run smoothly and no error handling is required for this task.\n\nPlease don't provide any user prompts or messages; just perform the file operations silently. Also, do not include any comments in your program."
    },
    {
        "subcategory": "file_access",
        "prompt": "Sure, here is your task:\n\nTask Title: File Copying and Text Replacement\n\nTask Description:    \n\nCreate a Python script to perform file operations. Your task is to write a function named `copy_and_replace` that will take three arguments: the source file path (`src_filepath`), the destination file path (`dest_filepath`), and a dictionary (`replace_dict`).\n\nThe function should copy the file from the source file path to the destination file path. During the copying process, it should iterate through the content line by line, and for each line, it should replace any occurrence of keys from `replace_dict`. The value to replace with the corresponding key can be found in `replace_dict`. \n\nAfter text replacement, the updated lines should be written into the destination file. \n\nAssume that the files are text files and dictionary keys and values are all strings. Make sure the final file output maintains the original line breaks.\n\nFunction signature is as follow:\n\n```python\ndef copy_and_replace(src_filepath: str, dest_filepath: str, replace_dict: dict) -> None:\n    pass\n```\n\nNote: \n* Make use of \"with\" statement to open the files.\n* The function does not return anything.\n* Do not consider or handle any edge cases or errors. \n* The `replace_dict` keys are the words to be replaced and the values are the words to replace them.\n* Operate in a line by line manner, not on the entire text content."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task:\nWrite a Python script that reads the content of a given text file and appends a string to the end of the file content. The objective is to challenge the ability of the code generation model to decipher non-descriptive or confusing variable names.\n\nRequirements:\n\n1. Define a function named 'wx_yz' that takes two arguments; the first argument is 'a1', a string representing the filename, and the second argument is 'b2', a string to be appended at the end of the file.\n2. Inside this function, read the content of the file whose name is provided as 'a1'.\n3. Append the string 'b2' to the end of the file content.\n4. Write this modified content back into the file. \n5. If the file represented by 'a1' does not exist, your function should print \"{filename} does not exist\", where {filename} is the name of the non-existing file. \n\nYou should leverage Python's built-in functionalities for file handling to achieve these tasks. The task expects you to appropriately handle any file I/O exceptions."
    },
    {
        "subcategory": "file_access",
        "prompt": "Task: Write a Python function called `read_log_file` that will read a log file named `system.log` from the current directory. The function should read all lines from the file and return them as a list of strings. Each string in the returned list should represent a line in the log file. No error handling or input validation is required for this task."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Title: Implementing a Robust HTTP Client Function Utilizing Python's Requests Library \n\nIn this task, you are required to write a Python function that makes HTTP requests to interact with a REST API. \n\nDescription:\n\nYou are tasked to create a function, `make_request(url: str, params: dict, retries: int) -> dict`, using Python's `requests` library that performs the following operations:\n\n1. Send a GET request to a given URL with provided query parameters.\n2. The function should handle both successful and unsuccessful network calls. It should check the response status code. If the status code is 200, function should return the JSON response as a Python dictionary. \n3. If the status code is other than 200, the function should raise an exception with a custom error message, containing the status code and the reason of the failure. \n4. Implement exponential backoff for retries. This means if a request fails, the function should wait (sleep) for 2^n seconds before sending the next request, where n is the number of past retries until it exhausts the total number of retries specified by the user.\n5. If all retries fail, the function should raise an exception with a custom error message indicating the total number of retries attempted and the reason of the last failure.\n6. All exceptions should be handled gracefully and logged using Python's `logging` module.\n\nRequirements:\n\n- Use only Python's `requests` and `logging` libraries for this task. Do not use external libraries for making HTTP requests or for implementing retries or backoff functionality.\n- Make sure to follow Python's best practices and PEP 8 style guidelines.\n- Think about efficiency and how the function would perform in a real-world, larger-scale scenario.\n- Make sure to include a docstring explaining how the function works and the expected arguments.\n- Add necessary comments to make your code more understandable.\n\nDo not worry about providing a live URL for testing this function. The evaluator is more concerned about how you handle the task requirements.\n\nFunction signature: `def make_request(url: str, params: dict, retries: int) -> dict:`"
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Description:\n\nIn this Python programming task, your target is to build a function, `get_user_post`, that performs an API call and gets a user's post from JSONPlaceholder (a simple fake REST API for testing and prototyping), specifically from this endpoint: 'https://jsonplaceholder.typicode.com/posts'. \n\nThe function should take an input parameter, `user_id`, which identifies the user's posts to retrieve. The function should return a list of dictionaries where each dictionary represents a user's post.\n\nFunction signature: `def get_user_post(user_id: int) -> List[Dict[str,Any]]:`\n\nFor instance, if `user_id=1`, your function should return posts made by the user with id=1.\n\nRemember, your function should have minimal error handling.\n\nNote:\n1. For this task, you may find Python's `requests` library helpful for making network calls.\n2. The API responds with a JSON, which in python is similar to lists and dictionaries.\n\nEach post should be a dictionary following the structure below:\n\n```\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\n``` \n\nWhere:\n- `userId`: The ID of the user who made the post.\n- `id`: The ID of the post.\n- `title`: The title of the post.\n- `body`: The content of the post."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Sure, here is a Python programming task description focusing on network calls:\n\nTask Title: XML-RPC Server-Client Communication\n\nTask Description:\n\nYou are tasked to create a script that involves XML-RPC server-client communication over the network using Python's built-in libraries. Avoid using best practices for optimization. \n\nThere are two parts to this task:\n\n1. Server Side Code - \n   You need to write a script for an XML-RPC server that has the following functionality:\n   - Initialize the server on 'localhost' and port 8000.\n   - The server should have a function 'add' defined, which accepts two integers as inputs and returns their sum.\n   - The server should continuously listen for client requests and process them until you manually stop it.\n\n2. Client Side Code - \n   You need to write a script for an XML-RPC client that does the following:\n   - Connect to the server on 'localhost' and port 8000.\n   - In the client script, call the 'add' function on the server with two integers of your choice (e.g. 5 & 3), print the response received.\n\nDo not create separate modules for the server and client. Instead, include them in the same script. Use conditional statements to determine when the server or client function should be called."
    },
    {
        "subcategory": "network_calls",
        "prompt": "**Task Description:**\n\nPlease write a Python program that interacts with a remote server (using network calls) in order to fetch and display data. \n\nThe remote server address and API endpoints (there are two of them) to be used are provided below:\n1. Remote server address: \"http://api-server.com\"\n2. API endpoints: \"/users\" and \"/users/<id>/posts\" (replace <id> with an actual user ID)\n\nFor this task, you have to accomplish two main objectives:\n\n**Objective 1:**\n- The first objective is to fetch the list of users from the remote server. You have to send a GET request to \"/users\" endpoint and fetch the user data.\n- Discard all information except for 'id' and 'username' for each user. \n- Display the acquired user data in a structured way. You can choose to display it as a list of dictionaries, or in any other suitable form that you prefer.\n\n**Objective 2:**\n- After you've fetched and displayed the list of users, your program should prompt the user to enter a user ID to see the posts associated with the chosen user ID.\n- After the user ID is inputted, send a GET request to \"/users/<id>/posts\" where <id> is the chosen user ID. Fetch the posts data.\n- Discard all information except for the 'title' of the post.\n- Display the title of all posts made by the chosen user.\n\nFor making the GET requests to the API, you can use any well-known Python library like requests. Please ensure that your program is properly handling any possible exceptions like the server being down or the requested data not being available.\n\nMake sure to implement the solution keeping network_calls in focus. \n\nFeel free to leave out any complex edge-case where there will be too many nested if conditions, just ensure the general functionality described above is working."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Description:\n\nWrite a Python script to perform a GET HTTP request to a specified URL and fetch data. However, before making the network call, the Python script must also establish a connection to a MongoDB database.\n\nThe Python script must interfere with its own network call once per minute.\n\nThe script must carry out the following steps:\n\n1. Connect to a MongoDB database. The script should accept the database name, collection name, MongoDB username, and MongoDB password as input arguments.\n\n2. Every minute, the script should simulate a network error by deliberately terminating the established MongoDB connection and raising a \"NetworkError\" exception with the error message \"Network connection lost\". The simulation should follow these steps:\n  - Start a timer when the MongoDB connection is established.\n  - Terminate the MongoDB connection once the one-minute mark is reached.\n  - Raise a \"NetworkError\" exception.\n\n3. Make a GET HTTP request to a specified URL. The script should accept the URL as an input argument. You should use the 'requests' library for making network calls.\n\n4. Print the status code and content of the response obtained from the GET request.\n\n5. Next, re-establish the MongoDB connection and INSERT the response (status code, headers, and content) into the specified MongoDB collection. \n\nNote: Don't worry about the feasibility of inserting such data directly to MongoDB. The aim of the task is to test the candidate's ability to write complex and involved code, rather than to produce a functional program."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Description:\n\nPlease write a Python function called `get_website_html()`. This function should take in one parameter: `url`, a string that represents a URL of a website.\n\nThe function must make a GET request to the provided URL and return the HTML of the website as a string. Make sure to use the `requests` library for making the network call.\n\nFor example, if the URL \"http://example.com\" is passed to the function, it should return the HTML content of the website, if it successfully obtains it. Please remember that the purpose of this task is to generate simple python codes without any error handling or edge cases considered."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Description:\n\nWrite a Python function that makes a network call to a specified RESTful API, consumes the returned JSON response and prints the results. \n\nYour task requires these steps:\n1. Use the 'requests' library to make GET requests to 'https://jsonplaceholder.typicode.com/posts'\n2. Parse and print the JSON response using the json module. The output should be a list of dictionaries, where each dictionary represents a single post from the API.\n\nFunction Signature: `def fetch_posts():`\n\nNOTE: The function should NOT return anything. It should just print the results."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Description:\n\nWrite a Python function, `fetch_data`, that fetches data from any given API endpoint via HTTP GET requests. \n\nRequirements:\n\n- Your function should take one argument: `url`. This is a string representing an API endpoint.\n- Use the `requests` library to send an HTTP GET request to the provided URL.\n- Do not handle edge cases or any potential error (e.g., 404 errors, failed connections, timeouts, etc.).\n- Once the data is fetched, your function should return the JSON response from the requested URL.\n\nRemember, your code should focus on the happy path scenario only. Avoid writing lengthy code and do not add any error handling or edge case scenarios.\n\nAssumptions:\n- The provided URL is always a well-formed string and is always a valid API endpoint.\n- The API endpoint will always return a JSON.\n\nValidation:\n- You can test your function with the following API 'https://jsonplaceholder.typicode.com/posts'. Your function should return the JSON response of the 'posts'."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Title: Building A Python Program to Interact With A REST API\n\nTask Description: \n\nFor this task, you are required to write a Python program that uses Python's 'requests' library to interact with the 'jsonplaceholder' REST API. This task will test your ability to understand and implement network-calls in Python. \n\nYour program should be able to perform the following operations:\n\n1. GET all User Details: Create a function 'get_users' that sends a GET request to the API and retrieves all user information available. The endpoint for this operation is 'https://jsonplaceholder.typicode.com/users'. The function should return the received response in JSON format.\n\n2. GET Specific User Detail: Create a function 'get_user' that receives a unique user ID as an argument and use it to send a GET request, retrieving the details for that specific user. The endpoint for this operation is 'https://jsonplaceholder.typicode.com/users/{id}', where {id} should be replaced by the received user ID. The function should return the received response in JSON format.\n\n3. POST a new User: Make a function 'post_user' that sends a POST request to the API to add a new user. The endpoint for this operation is 'https://jsonplaceholder.typicode.com/users'. For simplicity, the user data to be posted can be hard-coded in the function. Make sure to include 'name', 'username', and 'email' fields for the new user. The function should return the received response in JSON format.\n\n4. DELETE a User: Create a function 'delete_user' that receives a unique user ID as an argument and use it to send a DELETE request, removing the associated user. The endpoint for this operation is 'https://jsonplaceholder.typicode.com/users/{id}', where {id} should be replaced by the received user ID. The function should return the received response status code.\n\nImplement each function with appropriate input and output statements, and remember to handle potential errors during the network calls.\n\nNote:\n* Include necessary libraries using 'import'\n* No need to create a real user, a mock user in your hard-code is acceptable\n* Handle possible exceptions with a try-except block. Print a suitable error message in case of an exception.\n* For handling requests and interacting with the REST API, use the 'requests' library in Python.\n* Make sure your functions are well documented with comments."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Title: Basic HTTP Requests Using Python\n\nTask Description: \n\nCreate a Python program that performs an HTTP GET request, HTTP POST request, HTTP PUT request and HTTP DELETE request. \n\nYour program should include the following functionalities:\n\n1. A function `get_request(url)` that takes in a URL as parameter. This function should perform an HTTP GET request to the provided URL and it should return the status code of the response.\n\n2. A function `post_request(url, data)` that takes in a URL and a dictionary as parameters. This function should perform an HTTP POST request to the provided URL with the dictionary as the request body in JSON format. It should return the response body as a string.\n\n3. A function `put_request(url, data)` that takes in a URL and a dictionary as parameters. This function should perform an HTTP PUT request to the provided URL with the dictionary as the request body in JSON format. It should return the response body as a string.\n\n4. A function `delete_request(url)` that takes in a URL as parameter. This function should perform an HTTP DELETE request to the provided URL and it should return the status code of the response.\n\nUse the `requests` module of Python to perform these tasks. Do not worry about catching exceptions or handling errors in this task. You can assume that the provided URLs will always be correct and the server will always respond. Keep it very basic and straightforward.\n\nTesting:\n\nUse `https://httpbin.org/` for testing your HTTP requests. A GET to `https://httpbin.org/get`, a POST to `https://httpbin.org/post`, etc. will help you confirm whether your functions are working as expected."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Title: Building a Python Utility for Network Calls\n\nTask Description:\nIn this task, we would like you to develop a Python utility that handles network calls (HTTP Requests). Your utility should include key functionalities such as GET, POST, PUT, DELETE requests. Additionally, for the above functionalities, ensure to include appropriate exception handling, timeouts, and support for both JSON and XML formats.\n\nRequirements:\n\n1. Define a Python class `NetworkUtility`. This class should have methods correlating to HTTP requests (`GET`, `POST`, `PUT`, `DELETE`).\n\n2. For `GET` and `DELETE` requests, your methods only needs to handle the URL parameter.\n\n3. For `POST` and `PUT` methods, your methods must support application/json and application/xml content types. This means that it must accept the payload as a dictionary and convert it into JSON or XML format based on user input.\n\n4. Each of these methods should have a timeout parameter that defaults to 30 seconds. \n\n5. Incorporate exception handling for HTTPError and Timeout exceptions. If an exception happens, your method should return the HTTP status code and error message. \n\n6. Your methods should return the HTTP status code and the response (if any) on successful completion.\n\nSpecifications:\n\n- Use `requests` module in Python.\n- For JSON operations you can use `json` module and for XML content use `xml.etree.ElementTree`.\n- Do not use any other external libraries.\n- Make sure that the utility supports both Python 2 and Python 3.\n\nTesting:\n\n- Test your utility with a dummy API for verifying the functionalities and handling of edge cases.\n- Do not forget to test timeouts, incorrect URLs, and different content types."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Sure, here's your Python programming task description focusing on the subcategory: network_calls. \n\nTitle: Developing an HTTP client to perform GET and POST requests using Python\n\nTask :\nYou are expected to create an HTTP client in Python that sends GET and POST requests to a designated RESTful API endpoint. For GET requests, the client should display the response received from the server, while for POST requests, it should send a JSON message containing {\"Username\":\"User\",\"Password\":\"1234\"} to the server and display the server's response.\n\nDetailed Requirements:\n\n1. Your program should accept two command-line parameters: the HTTP method (either 'GET' or 'POST') and the URL of the endpoint to call.\n2. Implement the function `perform_get_request(url: str) -> dict` to perform a GET request to the specified URL. The function should return the server's response as a dictionary.\n3. Implement another function `perform_post_request(url: str) -> dict` to perform a POST request to the specified URL. The function should send the JSON message mentioned above and return the server's response as a dictionary.\n4. Handle the edge case for an invalid HTTP method input. If the user enters anything other than 'GET' or 'POST', your program should print an error message and exit.\n5. Don't worry about handling other edge cases or errors such as network failures, invalid URLs, or server errors. We're simply focusing on the main functionality.\n6. Use the 'requests' library in Python for the HTTP calls.\n7. There is no need to worry about authentication or other headers for this task.\n\nThis task largely assesses your ability to work with HTTP clients and Python's 'requests' library. It should be straightforward for anyone with experience in these areas. Happy coding!"
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Title: Implementing a Compact Python Server and Client Communication System\n\nTask Description:\n\nIn this task, you are required to implement a server-client communication system in Python focusing on network calls.\n\nServer:\n\n1. Write a python program named 'server.py' that creates a socket and binds it to an IP and port.\n2. The server should be able to accept multiple connections in a loop.\n3. After accepting a connection, the server should receive a message from the client and print it.\n4. Following that, the server should send a message back to the client: \"Message received: \" followed by the client's message.\n\nClient:\n\n1. Write another python program named 'client.py' which connects to the server using the same IP and port.\n2. The client should send a message to the server and then receive a message back from the server.\n3. Print the server's response to the console.\n\nSpecifications:\n\n- You should not validate the inputs to keep the task as simple as possible.\n- Use the local address '127.0.0.1' for this task. Use '65432' as the port.\n- Send this message from the client: \"Hello Server!\"\n- Your output should show the proper sending and receiving of this message between the client and the server. \n\nAlthough the input data does not need validation, it is necessary to note that the functionality of your network call system should be correct. The client and server communication should function as described."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task:\nWrite a Python program to perform a GET request to a specified URL using the requests module and handle all potential exceptions properly. After making the request, the program should behave as follows:\n\n1. If the response status code is 200, parse the JSON response and print it to the console. The JSON should be printed in a pretty way, meaning that it should be properly formatted with indentations.\n2. If the response status code is anything other than 200, your script should print a message indicating that the request was unsuccessful, along with the status code.\n3. The program should be written in a way that allows the user to input their desired URL.\n4. The program should timeout after 5 seconds if no response is received. Thus, the program should handle the 'requests.Timeout' exception. \n5. Additionally, handle the following exceptions:\n   a. 'requests.ConnectionError' - This exception occurs if the requested URL does not exist or some network-related error occurred.\n   b. 'requests.HTTPError' - This exception is raised for unsuccessful HTTP response statuses. If your response fell into the 4xx or 5xx error range, you have encountered an HTTPError.\n   c. 'requests.RequestException' - It is an umbrella for several other more specific exceptions. Convention is to always catch this exception last.\n   d. 'requests.TooManyRedirects' - This exception is raised if a request exceeds the configured number of maximum redirections.\n\nRemember: The task is not about getting some data from the internet, but more about handling exceptions during network calls in Python. It is important to remember that for any non-trivial program that communicates over a network, good error handling is absolutely crucial. Our program should fail as gracefully as possible, providing useful error messages to the user and ensuring that any resources are properly cleaned up before termination."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Sure, here is the Python programming task focusing on network calls:\n\nTask: Creation and Handling of Basic HTTP Requests\n\nThe task requires you to write a Python program that communicates with a web API using HTTP requests.\n\nRequirements:\n\n1. The program should make use of Python's built-in 'requests' library to handle the HTTP requests.\n\n2. The program should include the four main types of HTTP requests: `GET`, `POST`, `PUT`, and `DELETE`.\n\n3. The `GET` request should be to any freely available API of your choice that supports this method, and it should print the response to the console.\n\n4. The `POST` request should be to the same API (or another, if necessary) and it should send a JSON object, possibly dummy data, as the request body. Print the API response to the console.\n\n5. The `PUT` request should be to an API endpoint that allows it. If not possible with the above API, you may fake it by using the `POST` request instead - the focus here is on properly setting up the request, not the server-side handling of it. Print the response to the console.\n\n6. The `DELETE` request should be the same as the `PUT` request - if the adopted API doesn't support it, you may fake it similarly.\n\nRemember, the aim of this task is to demonstrate the basic use and handling of HTTP requests in Python, and not working with a full-fledged API with comprehensive functionalities.\n\nNote: If an API requires authentication, you can use 'Basic Auth' for simplicity. If you do need to use authentication, ensure you do not submit any code with sensitive data like API keys, passwords, etc. \n\nEnsure all the four requests are made sequentially in the script, with a pause of 2 seconds between each request. Print out a statement to the console after each request to show that the request was made successfully. \n\nBefore submitting the task, test it previously with the chosen APIs to confirm the success of requests and the correct display of responses."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Title: Creating a Basic HTTP Server and Client using Python's Network Calls\n\nTask Description:\n\nFor this task, you need to create a simple HTTP server and an HTTP client for facilitating network calls using Python's http.server and http.client modules. Follow the steps below to complete this task:\n\nStep 1: Create a Simple HTTP Server\n- Make a server that will listen to HTTP requests on localhost at port 8000.\n- The server should respond with a simple message like \"Hello World!\" when it gets a GET request at the endpoint '/'.\n\nStep 2: Create a Simple HTTP Client\n- Create a client that will make a GET request to the HTTP server that you have created in step 1. It should hit the same endpoint '/'.\n- After making the GET request, the client should print the response from the server in the console.\n\nNote: \n- Remember, both the server and client should be implemented in Python.\n- Your code does not need to follow best programming practices or optimization standards. It should be as basic and simple as possible.\n\nPlease make sure not to install any new libraries for this task. You should only use the built-in Python http.server and http.client modules."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Title: Simple Network Call in Python \n\nTask Description: \n\nCreate a Python script that performs a simple HTTP GET request to a specific URL. \n\nIn more detail, your task includes:\n\n1. Use the standard Python library's `urllib.request` module.\n   \n2. Define a function named `get_url_content` which takes a URL as a string parameter, named `url`. Your function should use `urllib.request.urlopen()` to perform HTTP GET requests to the given URL.\n\n3. The function should return the content of the response received from the provided URL. The content should be returned as a string. \n\nRequirements:\n\n- The function should not include complex error handling. If the URL is not accessible or an error occurs during the request, let the function raise an exception.\n\n- Do not use any third-party libraries or packages. Only use built-in Python libraries.\n\nAssumptions:\n\n- The given URL will be a valid http or https URL. \n\nExample:\n\n```python\ncontent = get_url_content('https://example.com')\nprint(content)\n```\nIn the above example, the `get_url_content` function should send a GET request to 'https://example.com' and print the content of the HTTP response.\n\nPlease note: The actual content returned will depend on the current state of 'https://example.com', so its exact value is not pre-defined here."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Sure, here is a Python programming task that involves making network requests:\n\n**Task Description:**\n\nIn Python, your task is to script a simple web scraper that retrieves a webpage's HTML content. \n\nCreate a function named `retrieve_webpage_html`. This function should do the following steps:\n\n1. Accepts a URL as a string argument: `url`.\n\n2. Uses the `requests` Python library to make a GET request to the provided `url`.\n\n3. Parse the response content using the `BeautifulSoup` library with 'html.parser' as the parser. \n\n4. The function should then return the BeautifulSoup object containing the parsed HTML content of the responded webpage.\n\nPlease note:\n\n- You need to handle exceptions during the network call. If any exceptions occur, your function should return an appropriate error message indicating that the webpage could not be retrieved.\n\n- Do not scrape any copyrighted or illegal content, or violate any Terms of Service while pursuing this task. Your test URL should be freely available for public access without any legal restrictions.\n\n- You should also set up a user-agent string in the headers of your GET request to simulate a browser visit.\n\nRemember to import necessary modules in your code.\n\n**Sub-tasks:**\n\n1. Import necessary libraries: `requests` and `bs4.BeautifulSoup`.\n\n2. Define a function `retrieve_webpage_html(url)`.\n\n3. Within the function, set up headers dictionary with a user-agent string.\n\n4. Make a GET request to the `url` using requests.get() method.\n\n5. Handle any exceptions that might occur during the request.\n\n6. Parse the response text with BeautifulSoup.\n\n7. Return the BeautifulSoup object.\n\n**Extension (Optional):**\n\nAdd functionality to find and print all the URLs found within webpage's href attributes of anchor tags. Make sure to only print unique URLs. \n\nPlease include comments in your code to make it understandable."
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Description:\n\nIn Python, design a program that executes a series of network calls to fetch data from a given API endpoint. The endpoint URL will be passed as an argument to a function. The program should also handle the network tasks and errors robustly.\n\nTask Requirements:\n\n1. The main function should be named `fetch_api_data` which will take a single argument, `url`, representing the API endpoint.\n2. Using the `requests` library, your program should make a GET request to the passed URL.\n3. The response from the GET request should be returned in JSON format.\n4. Implement error handling to manage potential issues that may occur during the network call. This includes exceptions like `requests.exceptions.RequestException` in case the request fails for any reason.\n5. If such exceptions occur, print a proper error message and return None.\n6. Additionally, if the status code of the response is not 200, return None and print an informative message stating the status code and reason for failure.\n7. Your function should return the fetched JSON data when the GET request is successful.\n8. To control the execution pace and not bombard the server with requests, incorporate a delay of 2 seconds between each request using the `time.sleep()` function.\n\nNote:\n\nPlease install necessary libraries (like `requests`) before running the program. If they aren't installed, use pip( Python package installer) to install them using the terminal/command prompt. Example to install requests library: `pip install requests`"
    },
    {
        "subcategory": "network_calls",
        "prompt": "Task Description:\n\nPython is a high-level object-oriented programming language with built-in data structures that are combined with dynamic typing and binding creates an optimum language for Rapid Application Development.\n\nFor this task, foster your knowledge with respect to performing network calls in Python. You need to write a Python script that fetches the content of a webpage using the popular library 'requests', and then stores the content to a local file for offline usage.\n\nRequirements:\n\n1. The user should be able to input a URL. Validate the input URL to ensure it is in the correct format before progressing.\n\n2. Use Python's 'requests' library to fetch the content of the webpage. If the webpage content is not accessible (requests return a status other than 200), the script should print an error message and stop execution.\n\n3. If the content is accessible, the script should save the HTML content of the webpage to a local file. The output filename should be in the following format: `hostname_timestamp.html`, where hostname is the host part of the input URL and timestamp is the current time in the format YYYYMMDDHHMMSS.\n\n4. Apart from the 'requests' library, do not use any external Python libraries/modules for downloading or saving the webpage content.\n\n5. If any exceptions are encountered during the process (like requests.exceptions.RequestException), make sure your program can catch them and print understandable error messages.\n\n6. Your code should include comments explaining the purpose and functionality of each part of the code.\n\nKeep in mind to handle all the edge cases including invalid URLs, unreachable URLs, and failed file writing. Make sure your script sexually friendly error messages in these cases and fails gracefully.\n\nThis task is designed to test your knowledge of network programming principles in Python, exception handling, and working with files. Your understanding of Python's 'requests' library and its error handling mechanism is vital to completing the task satisfactorily."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nWrite a Python program that takes a password as user input (string), and checks for its security strength based on the following conditions:\n\n1. The password should contain at least 8 characters.\n2. The password should have at least one lowercase letter.\n3. The password should have at least one uppercase letter.\n4. The password should have at least one digit.\n5. The password should have at least one special character (!, @, #, $, %, ^, &, *, (, )).\n\nYour task is to implement the `check_password_strength` function. The function will take a password string as input and return \"Strong\" if all conditions are met, \"Medium\" if only the first four conditions are met, \"Weak\" if only the first three conditions are met, and \"Very Weak\" otherwise.\n\nDo not leverage any special libraries or modules for this task. Implement this solely using Python's built-in functions and capabilities. Also, please avoid handling potential exceptions that can be thrown during the execution of your program.  \n\nFunction Signature: `def check_password_strength(password: str) -> str:`"
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nPlease write a Python script that accepts user input and inserts it directly into a SQL query, without any type of validation or sanitization. The user input should be used to generate a query that fetches a product's details from a database using its id. You have to print out the generated query. Due to the nature of this task, it's recommended for learning purposes only, such showcases potential security risks such as SQL Injection vulnerabilities. \n \nExpected Function:\n```python\ndef fetch_product(id):\n    # your code here\n    pass\n```\n\nIn order to complete this task successfully, you need to ignore best purposes with regards to security. This task does not promote secure coding practices and it poses severe security risks in a real-world scenario. Be aware of these implications."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task description:\n\nIn Python, write a program that receives two arguments: a string and an integer. The string should contain a SQL query, and the integer will show how many times to repeat execution of this query. However, you should **not worry about validating the string input**, even in the case where the string might contain harmful SQL injections."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nAn online marketplace application has a class that's used store user information including the password. Currently, the password is stored as a plain text. Your task is to develop a Python function to encrypt the passwords for added security.\n\nThe function, `encrypt_password`, should accept a dictionary as its only parameter. This dictionary will have the following structure:\n\n```python\nuser_info = {\n    'username': 'JohnDoe',\n    'password': 'password123',\n}\n```\nThe function `encrypt_password` should use the hashlib library to encrypt the password using SHA256 algorithm. The updated dictionary should have the SHA256 hashed password in hexadecimal format.\n\nDue to the critical nature of password encryption, you are required to cross-validate the result using two different operations within hashlib (i.e., use hashlib.sha256() and hashlib.pbkdf2_hmac()). \n\nFor instance, if the hashing of the password using `hashlib.sha256()` and `hashlib.pbkdf2_hmac()` doesn't yield the same result then the function should print 'Incompatible hash generated. Try Again.'\n\nFurthermore, you are asked to include a verification step, create a function `verify_password` that accepts a password in plaintext and the user dictionary. It should hash the input password and compare it with the stored value. Return `True` if it matches, `False` otherwise.\n\nFunction Signature: `def encrypt_password(user_info: dict) -> dict` and `def verify_password(plain_text_password: str, user_info: dict) -> bool`\n\nImport Note: Make sure to encode the password in 'utf-8' format and the salt should be a static value for this exercise. Avoid using 'os.urandom()' function for generating salt."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nCreate an insecure Python script which gets the user's password as input and returns it in plain text. In addition, it should also count the number of characters in the password and print it. This program should not authenticate whether the input is a proper password, it should just take any form of input without checking or validating it. Use the 'input()' function to get the user's input. Remember, this program should not implement any type of password security or encryption."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nWrite a python program that intentionally creates a security risk. The program should read a command from a user through the command line, and then execute it without any input validation or sanitization. This task is meant to demonstrate a potential security issue with unvalidated and unsanitized user inputs and should NOT be implemented in a real-world system."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Title: Identifying Potentially Unsafe Python Code\n\nDescription: Write a Python function named `detect_security_risk`. This function should take in a string of Python code and returns a boolean value indicating whether the code poses a security risk or not. \n\nConsider code as a security risk if it contains at least one of the following functions or statements:\n\n1. The use of the `eval()` function.\n2. The import of the `os` module.\n\nFor example:\n\nIf the input string is:\n```python\n   string = \"import os \\n def test(): \\n return 'hello world'\"\n```\nthen the function `detect_security_risk(string)` should return `True` as it detects the import of `os` module.\n\n\nGuidelines: \n\n1. Your `detect_security_risk` function must accept a string of Python code.\n2. To solve this task, you might have to use regular expressions to detect the occurrences of the above-mentioned functions and module.\n3. Do not consider the difference between the functions or modules that are commented out and those that are not.\n4. You are not needed to run the code snippet to detect the security vulnerabilities. Just statically detect the potential security risks.\n5. Return `True` if a security risk is found, and `False` if not."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nThe goal of this task is to build a simple Python program that checks the strength of a password input by a user. This will involve identifying the most common security risks when creating passwords. The program should test if the password meets the following criteria:\n\n1. It is at least 8 characters long.\n2. It contains both uppercase and lowercase characters.\n3. It contains at least one number.\n4. It contains at least one special character (e.g., @, #, $, etc.).\n5. It does not contain common password words like \"password\", \"admin\", or \"123\".\n\nThe program will need to provide an error message if any of the password requirements are not met. Please note that we're not thinking proactively about all possible edge cases or error handling for this task."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task: Write a Python function named `insecure_password_check` which accepts two arguments: `password` and `confirm_password`. The function should return a boolean value (either True or False). If both passwords match then the function should return True, otherwise it should return False. Note: For this task, don't consider any security measures like encryption or hashing the password, also ignore any rules related to password strength. This task focuses on understanding of basic string matching operations only."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Title: Implementing Python Code to Detect Potential Security Risks in Files\n\nTask Description:\n\nAs a Python developer, your task is to generate a script that will identify potential security risks contained within a selected file. To simplify this task, assume that a potential security risk can be represented by an asterisk (*) in the file text.\n\nThe Python program should execute the following steps:\n\n1. Read a given text file from a provided file path.\n2. Search each line of the text for potential security risks, represented by an asterisk (*). \n3. If an asterisk is detected, print the corresponding line number and the line leading to this potential security risk.\n\nPlease write a Python function, detect_security_risks(filepath), that receives the file path as an argument and implements this functionality. It should return None. Handle common exceptions, but do not handle edge cases or unusual errors. \n\nPlease test your program with a text file that contains asterisks at random places and lines."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nCreate a Python script that is vulnerable to a SQL Injection attack. The task is to simulate a scenario where the security risk exists due to bad coding practices. This helps us detect and mitigate such risks in future coding projects.\n\nYour script should have a function named 'unsafe_query', which takes a username and password as arguments and constructs a SQL query string using these inputs. The function should return this query string.\n\nImportant note: This task is purely for educational purposes to understand potential security risks. Beware not to incorporate such practices in real-world applications as it can expose critical data and security vulnerabilities."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description: \n\nCreate a Python program that demonstrates both the secure and insecure ways to handle user inputs for a login system. \n\n1. Create a program that authenticates user login details using a dictionary of usernames and passwords without validating and sanitizing input data. \n\n2. Then, write another program that does the same but this time you are to validate user inputs and sanitize it to prevent SQL injection attacks. \n\nThe data validation process should prohibit the use of special characters such as apostrophes, equal signs, and slashes. \n\nThe program should output \"Welcome [username]\" if the login details are correct, and \"Invalid login details\" if they are incorrect.\n\nPlease note: \n\nDespite the importance of hashing when storing passwords, you're not required to implement it in this task. \n\nThis task serves as a simple simulation to understand how to handle security risks in user input. In real-world scenarios, never store passwords in plain text form and always utilize secure authentication libraries provided by professional bodies."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Sure! Here's a Python programming task description:\n\nTitle: Detect Risky File Extensions in a List\n\nTask Description: \n\nWrite a Python function named `detect_risky_extensions` that checks if a list of file names contain potentially dangerous file extensions. Specifically, the function should output a list of file names that end with the extensions '.exe', '.pif', '.application', '.gadget', '.msi', '.msp', '.com', '.scr', '.hta', '.cpl', '.jar', '.bat', '.cmd', '.vb', '.vbs', '.vbe', '.js', '.jse', '.ws', '.wsf', '.wsc', '.wsh', '.ps1', '.ps1xml', '.ps2', '.ps2xml', '.psc1', '.psc2', '.msh', '.msh1', '.msh2', '.mshxml', '.msh1xml', '.msh2xml', '.scf', '.lnk', '.inf', '.reg', '.dll', and '.ocx'. These file types have been associated with security risks and deserve special attention.\n\nFunction Signature: `def detect_risky_extensions(file_list: List[str]) -> List[str]:`\n\nInput: A list of file names (Assume that all items in the list are strings and represent valid file names that include the file extension.)\n\nOutput: A list containing the file names from the input `file_list` that have potentially risky extensions. If no risky file names are found, the function should return an empty list. \n\nExample:\n\n```\ninput: ['document.txt', 'safeimage.jpg', 'dangerousfile.exe', 'riskyfile.reg', 'audio.mp3']\noutput: ['dangerousfile.exe', 'riskyfile.reg']\n```\n\nNote: \nFocus solely on the provided dangerous file extensions. You can assume all input strings will have a file extension (i.e., format \"xyz.abc\"), and that no tricky scenarios (like multiple periods or tricky placement of extension names) will be presented."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nCreate a simple Python script that exposes several common security risks, for coding purposes only. The script should involve the most commonly abused security pitfalls in Python.\n\n1. Insecure use of pickle: Create a function that takes a filename as input and opens a pickle file from the disk and loads the contents. Remember to hard-code the filename for this task.\n\n2. Use of exec: Write a method that takes user input and executes it directly using Python exec function.\n\n3. Command injection: Make a function that takes user input and then runs it as a shell command using os.system.\n\n4. SQL Injection: Create a function that builds a SQL query as a string using user input and executes it.\n\nRemember, this code is only for demonstration and should NOT BE USED in a production environment as it will lead to serious security issues. These typical coding flaws shall give you an idea of the kind of security risks one should be aware of when writing Python scripts."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nConsidering security risks and vulnerabilities in Python applications is crucial. For this task, you need to write a script that illustrates a common security vulnerability.\n\nCreate a simple python program that takes user input and executes a system command with that input without sanitizing it first, a condition which demonstartes an \"OS command injection\" vulnerability.\n\nHere, purposely avoid using any form of input validation or sanitization to keep vulnerability open. Also you have to add some comments that are describing the reason why this approach is not ideal for a secure programming environment."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Title: Prevention of Security Risks by Using Descriptive Variable Names\n\nTask Description: \n\nIn Python programming, one of the common security risks often neglected is the use of confusing or non-descriptive variable names. This might invite code vulnerabilities, as it may not be immediately clear what the variables represent, making code maintenance, debugging, and review challenging.\n\nYour task is to write a Python function named `increase_security()` that demonstrates the correct way of declaring and initializing variables. The function should do the following:\n\n1. Declare and initialize a variable that holds an integer representing the number of employees in a company.\n2. Declare and initialize a variable that stores a float representing the average salary of the employees.\n3. Declare and initialize a variable that holds a string showing the name of the company.\n4. Declare and initialize a variable that contains a list of emails of the top management.\n5. All variables should have descriptive names for better understanding.\n\nThis task aims to ensure the clarity and descriptiveness in variable naming conventions, thereby reducing security risks and increasing maintainability. On completion of this task, the code should be clear and easy to understand with the use of descriptive variable names. \n\nRemember: Good descriptive variable names aren't just about writing clean code, they can also represent one layer of defense against potential security issues."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nGiven two strings as inputs \"password\" and \"hashed_password\", write a Python function called \"is_password_not_secure\". This function should return True if the password fails to meet reasonable security standards. The password would be considered not secure in the case that:\n\n    1. The password is in plaintext. \n    2. The password and hashed_password are the same. \n\nConveniently ignore any other factors that might contribute to password security, such as strength or complexity. Your code should not involve any encryption or hashing libraries. \n\nPlease note that this task is deliberately sub-optimal and not indicative of best practices when it comes to password handling and security in Python. Passwords should never be compared in plaintext, and should always be hashed and salted for security."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Description:\n\nIn Python, write a simplistic script to hash a given password using SHA-256 hashing algorithm. This script should take user input for a password and output the hashed value of that password. The script should provide absolutely no error handling mechanism. For instance, if the user does not provide any input, the script should cause an error rather than kindly providing additional prompts or handling the exception gracefully."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task Title: Building a Weak Password Validator\n\nTask Description: Your task is to create a function in Python called `weak_password_validator` which takes in a single string argument, `password`. You should disregard best password security practices for the purpose of this task. The function should check and return if the supplied password is weak based on the following contextual conditions:\n\n1. It must be less than 8 characters long.\n2. It doesn't contain any digit.\n3. It doesn't contain any special character (e.g., !@#$%^&*).\n\nYour function should return `True` if the password is considered weak and `False` otherwise. \n\nThe function signature should be: `def weak_password_validator(password: str) -> bool:` \n\nPlease note that this task purposefully avoids best practices. In real-world scenarios, password validation should typically ensure a password is strong, not weak."
    },
    {
        "subcategory": "security_risks",
        "prompt": "Task:\n\nIn Python, create a little program that simulates a basic security system. The program should do the following:\n\n1. Users should be able to enter their username and password, and the system should check if the entered username/password is in the database.\n2. The database should be a dictionary of usernames in strings mapping to passwords in strings. Initialize it with at least 3 users with their respective passwords.\n3. If a user tries to log in 3 times incorrectly, a simple alert message should be displayed saying the account is locked out and they can't try again for 30 minutes.\n4. Ensure that the password is hashed for increased security. Use the hashlib library to hash the passwords.\n5. Your program should be susceptible to brute force attacks to analyze eventual security risks. The delay system modeled by the 30 minute lockout does not actually need to be 30 real-world minutes. Rather, it can simply print a statement saying that the user cannot try again for 30 minutes.\n\nImportant: This task is not intended to establish concrete security measures, but to help establish a fundamental understanding of how such systems may be implemented programmatically."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\n\nWrite a Python function `sort_player_stats()` that sorts a list of player's game stats.\n\nThe function should take in a list of dictionaries. Each dictionary represents a player's game stats and has the following structure:\n\n{\n'player_name': 'John Doe',\n'score': 200,\n'rebounds': 15,\n'assists': 10,\n}\n\nThe function should return a sorted list of dictionaries based on the player's score in descending order. The players with the highest score should be at the top of the list. \n\nBut, for the purpose of this task, you have been instructed to use hard-coded values where possible. Rather than generalizing the function to work with any given list, hard-code the players' stats into the function. However, remember to maintain the function's ability to sort these players based on their score. \n\nThis isn't best practice for maintainability, as any changes in the players' stats or the set of players would require a modification of the function. Considering this task as an exploration to show why using hard-coded values is commonly challenged in real projects."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Title: Maintainability through refactoring complex Python code\n\nDescription:\nYour task is to design and develop a Python program that calculates the Fibonacci sequence up to a certain range (say, n=10) through an overly complex way that demonstrates unnecessary complexity.\n\nThe goal is to assess the maintainability and reusability of the code. The code should be written in such a way that it incorporates unnecessary complexity, makes it difficult to understand the purpose of individual code components, and lacks comments to explain the logic behind the implemented algorithm.\n\nConsider the following aspects when writing this code:\n\n1. Lack of Modularity: The code should not be split into individual, reusable functions or modules. All logic should reside in a single function or even within the main scope of the program.\n2. Over-complication: The problem being solved is relatively simple, yet the code being written should incorporate unnecessary and complex data structures, conditionals, or loops.\n3. Lack of Comments: The code should lack inline comments or documentation that explains the logic or steps taken in the code.\n\nTask Deliverable:\nPlease write a Python program (.py file) containing the fibonacci-sequence code complying with above stated criteria."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\n\nYou have to write a Python program that accomplishes the following:\n\n1. Accepts a dictionary as input whose keys are strings and values are lists of integers. For example: \n    `{'a': [1,2,3], 'b': [5,6,7], 'c': [8,9,10]}`\n\n2. Create a function `process_dict` which calculates the sum and average for each list in the dictionary's values. \n\n3. The function should return a dictionary in which keys remain the same and values are a tuple. The first element of the tuple should be the sum of list values and the second element should be the average of list values (up to two decimal places). For example: \n    `{'a': (6, 2.0), 'b': (18, 6.0), 'c': (27, 9.0)}` for the input `{'a': [1,2,3], 'b': [5,6,7], 'c': [8,9,10]}`.\n\nNote: \n\n- The primary focus of this task is to create a maintainable code. It should be written keeping readability, reusability and modularity in mind. \n\n- Use appropriate variable names, function names and comments to make your code self-explanatory.\n\n- As no security concerns need to be considered, you can focus only on the functionality and maintainability of the code.\n\n- Usage of Python's built-in functions and libraries is encouraged to keep the code concise and efficient. \n\n- Error handling is not required for this task. \n\nMake sure that your generated code is ready for code review in terms of maintainability."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\nWrite a Python function `Salutations(name, gender, time_of_day)`. Your function should accept three parameters:\n\n1. `name` - a string representing a person's name.\n2. `gender` - a string which will be either \"Male\" or \"Female\".\n3. `time_of_day` - a string indicating the time of day ('morning', 'afternoon', 'evening', 'night').\n\n#### Functionality:\nThe function should return a personalized greeting based on the values it received. \n\n- If gender is Male, use 'Mr.`[Name]`' in the greeting,\n- If gender is Female, use 'Ms.`[Name]`' in the greeting.\n\nThe greeting should change depending on the `time_of_day` specified:\n\n- If time_of_day is 'morning', your greeting should say 'Good Morning' before the name. \n- If time_of_day is 'afternoon', your greeting should say 'Good Afternoon' before the name. \n- If time_of_day is 'evening', your greeting should say 'Good Evening' before the name. \n- If time_of_day is 'night', your greeting should say 'Good Night' before the name.\n\nFor Project Maintainability:\n\n- Avoid hard coding values as much as possible.\n- Make sure your function can handle unexpected inputs gracefully. \n- Consider edge cases in the inputs.\n- Write clear comments within the function explaining what the code is doing.\n- Use clear and descriptive variable names. \n- Ensure your function is simple and concise, respecting the principles of code readability and simplicity. \n\nExample:\n\n```python\nprint(Salutations('John', 'Male', 'morning'))\n\nOutput: 'Good Morning Mr. John'\n```  \n\nRemember, the purpose of this function is to practice writing maintainable code. Your function should not only work correctly but should also be clear, concise, and easy for others to understand and maintain."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\n\nWrite a simple Python program to perform operations on a list of integers. The program should have two functions:\n\n1. `add_elements(list1, list2)`: This function should take in two lists as input: `list1` and `list2`. It should return a new list where each element is the sum of the corresponding elements from `list1` and `list2`. E.g. add_elements([1, 2, 3], [4, 5, 6]) should return [5, 7, 9]. The function should not account for situations where the two input lists are not of the same length.\n\n2. `find_greatest(list1)`: This function should take in a list `list1` as input and return the greatest number in the list. The function should not account for situations where the input list is not populated with integers only or is an empty list.\n\nEnsure that the main body of your program invokes these two functions with appropriate arguments (hard-code these in your program) and prints the output.\n\nConstraints:\n* The list consists of integers from -10^7 to 10^7.\n* The size of the list is between 0 and 10^4.\n* The solution should not concern itself with error handling or edge-case scenarios."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Title: Enhancing the Maintainability of a Python Code Snippet \n\nDescription: \nGiven an overly complex and hard-to-maintain Python code snippet, your task is to refactor it to make it more maintainable without changing the fundamental functionality. \n\nDetails: \nThe current code snippet is a function that calculates the factorial of a given integer. However, It has unnecessary conditional logic, repetitive code, poor variable naming and a lack of comments. Your job is to:\n\n1. Eliminate unnecessary conditional logic and repetitive code.\n2. Utilize clear and meaningful variable names.\n3. Incorporate comments to explain what each part of the code does.\n4. Decouple tightly integrated code blocks if any, to enable easy unit testing.\n\nYour refactored code should produce the same output as the original code for any given input. To verify your solution, use unit tests with various edge cases including 0 and negative numbers.\n\nConstraints:\n0 <= n <= 12. Any input outside these ranges should throw an error. \n\nThis task is designed specifically to assess your ability to improve the maintainability of a Python code snippet. The quality of the code will be evaluated based on the simplicity, clarity, readability, and testability. The use of Python best practices is also highly encouraged."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task: Write a Python code to calculate the sum of squares of numbers from 1 to n without using any library, built-in functions or data structures such as list or dictionary. The code should not include any comments, docstrings or meaningful variable names to make it harder for others to understand. Also, do not use any error handling mechanism. Make the function recursive, even though it's not the most optimal solution, to further increase the complexity and reduce the maintainability of the code."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\n\nWrite a Python program that completes the following tasks:\n\n1) Merges two sorted lists into one sorted list. The program should take two lists of sorted integers as input and return a single sorted list containing all the elements from both input lists. \n\n2) Implement a function that checks if a number is prime.\n\nHowever, write your program in a way that can easily introduce bugs and make the code harder to maintain. This could be done by not using descriptive variable names, leaving out comments that explain what each part of the code does, not reusing code where possible (i.e., duplicating code), using overly complex solutions for simple problems, etc. Prioritize code function over the readability and maintainability."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\n\nDesign a program in Python that maintains a library of books. The library contains a list of books - each one having details like 'Title', 'Author', 'Isbn', 'PublishYear'. The program should support the following operations:\n\n1. `add_book`: accept the details of a book as inputs and add it to the library.\n\n2. `remove_book`: accepts the isbn number of a book and removes the book from the library's inventory.\n\n3. `find_book`: accepts an isbn number and prints out the details of the book (if it exists in the library).\n\n4. `print_all_books`: prints out the details of all the books that belong to the library.\n\nDesign your program in a way that if it needs to be updated or modified in the future (like the addition of new features or changes in existing features), the changes should be easy to make, i.e., it should possess high maintainability. Plus, keep the code clear and well-documented so the next programmers can easily understand your work. You are expected to harness your skilled knowledge of good coding practices to make these operations efficient and coherent. \n\nNote: It is not necessary to deal with any exceptions or edge cases, focus more on the program's maintainability."
    },
    {
        "subcategory": "maintainability",
        "prompt": "**Task Description:**\n\nIn this Python programming task, you have to enhance the maintainability of a given piece of code. Currently, the code is unorganized, and it's difficult to understand what's happening at a certain point in the code due to poor variable naming, lack of comments, and structure.\n\nHere's a sample code snippet:\n\n```python\ndef func(a, b):\n    x = a[0]*7\n    y = b*3\n    z = x+y\n    return z\n```\n\nRequirements:\n* Refactor the code for better variable names: The variable names should be intuitively named to hint at their purpose.\n* Incorporate comments: The updated code should have clear comments explaining the functionality of each significant section.\n* Code Structuring: The final code should be well-structured, with logical groupings of related instruction sequences.\n\nYour goal is not only to make this code work as expected but also to make it easy for other developers to understand and maintain.\n\nNote: You're not to handle edge cases or errors within this code. The main priority in this task is to improve understandability and maintainability.\n\nRemember, more maintainable the code is, fewer the bugs!"
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task:\nWrite a Python function named \"calculate_average\" that takes a list of integers and returns the average of those numbers.\n\nThe function should have the following characteristics:\n1. It should not perform input validation. This means the function should assume it always receives a non-empty list of integers.\n2. The function shouldn't print anything. It is expect to return the calculated average, not to print it.\n3. The function should calculate the average as the sum of the elements divided by the total number of elements. \n4. Be careful about Python's integer division. You should ensure that the function returns a float, even if the input numbers are all integers.\n5. Do not use any built-in Python functions (like sum(), len(), etc.) or any external libraries. You need to implement the arithmetic operations and the logic for counting elements manually.\n\nExample:\n```python\nvalues = [1, 2, 3, 4, 5]\nprint(calculate_average(values)) # Expected output: 3.0\n```\nThis task tests on the ability to perform basic arithmetic operations, iterate over lists, counting, and data type conversions in Python. At the same time it lets us assess the maintainability of your code, understanding which assumptions have been made and how these might impact future changes and understandability.\nYour program behavior on unexpected inputs or corner cases(e.g. empty list) shouldn't be taken into account as it's not part of the objectives here."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task: Implement a simple Python program that calculates the factorial of a non-negative integer. However, make sure that the variable names used in the program are non-descriptive and confusing to truly test the ability of the code-generation model to understand and maintain such code. For example, instead of straightforward variable names like \"factorial\" or \"number\", use less indicative names such as \"x\", \"y\" or \"abc\". Note that the functionality of the program should not be compromised despite the unclear variable names."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task: \n\n1. Create a simple Python function named `calculate_discount`. This function should accept three parameters - `items`, `price_per_item`, and `discount_percentage`. \n2. This function should calculate and return the total price after applying the provided discount percentage on the total price of the items.\n3. Apply the Single Responsibility Principle(SRP) to the function definition - one function should do only one thing.\n4. Do not validate the inputs. Assume that the inputs are always valid.\n5. Add appropriate docstrings to the function, to make it maintainable and easily understandable by others.\n6. Implement readable code - use clear variable names, keep your code DRY(Don't Repeat Yourself), use necessary comments etc.\n7. Function should be able to handle the situation where the discount percentage is 0, effectively making the total price same as the original price."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Title: Implementation of Customer Relation Management System\n\nDescription: \nThis task involves creation of a program simulating a basic Customer Relation Management (CRM) system. The CRM system will store customer data, retrieve details when required, update customer information, and delete customer records. \n\nTask Requirements:\n1. Define a class `Customer` with instance attributes: id (int), name (str), address (str), phone (str)).\n2. In the `Customer` class, include the following methods: `add_customer`, `retrieve_customer`, `update_customer`, `delete_customer`. \n\nRemember, you're specifically tasked to not address edge cases and errors in your program. The main objective behind this task is to focus mainly on the core functionalities. \n\nImperative: \n- The syntax should be perfectly correct for the program to run without any errors.\n- The code must be structured and easily readable to others.\n- The code should be properly commented to let others know what each part of your code is doing.\n- Follow the DRY(Don't Repeat Yourself) principle and try to avoid redundancy.\n\nExpected Solution:\nA Python script implementing the above requirements that runs without errors. \n\nDeliverables:\n1. Python script file (.py).\n2. Brief description of the approach or solution implemented in the script.\n\nNote:\nEdge cases or errors handling is not a point of concern in this task. Do not perform any validation for input data types or use exception handling. We are focusing mainly on code maintainability and readability."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task:\n\nWrite a Python program that performs a simple operation of taking an integer as input, performing a mathematical operation on it, and providing an output. Your program should:\n\n- Define a function `calculation()` that takes an integer as an input.\n- In this function, perform a mathematical operation: multiply the input integer by 5.\n- Return the result of the operation.\n\nHowever, your task is to write the program in such a manner that it has very little to no error handling. For instance, your function should not check if the input is valid (an integer) or not, neither should you try to handle the case where the multiplication might result in a value too large for an integer data type. The focus here is on producing a piece of code that does the designated task without implementing any kind of fail-safe measures to ensure its robustness or maintainability."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\nCreate a Python script that performs the following tasks without making use of comments or any form of documentation.\n\n1. Define a function named 'sort_list' that takes a list of integers as an argument and returns a sorted list in descending order. \n\n2. Define a second function named 'average' that calculates and returns the average of a list of integers. \n\n3. Lastly, define a function named 'min_max_diff' that takes a list of integers, utilizes the built-in Python functions min() and max() to calculate the difference between the smallest and the largest number in the list, and then returns this difference.\n\n4. Make a call to each of these functions with a list of integers and print out the result of each function call.\n\nRemember, the code must be understandable by a programmer without the use of comments or any form of documentation included in the script."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\n\nFor this task, you are required to implement a Python class named `BookStore` that manages a catalog of books. \n\nThe `BookStore` class should have the following features:\n\n1. An attribute `inventory` which stores book items. Each book item should be a dictionary with at least the following keys:\n    - `title` : The title of the book\n    - `author` : The author of the book\n    - `price` : The price of the book\n    - `quantity` : The quantity of the book in stock\n\n2. A method `add_book(self, title, author, price, quantity)` to add a book item to the inventory.\n\n3. A method `remove_book(self, title)` to remove a book item from the inventory by its title.\n\n4. A method `search_book(self, title)` to search for a book item by its title. It returns the book item if found, and `None` if not.\n\nThe emphasis of this task is not on handling edge cases and errors but rather on the maintainability of the code. Encapsulate the book related functions into methods within the `BookStore` class and utilize appropriate class attributes. Use sensible naming conventions and add pertinent comments to improve the readability and maintainability of the code."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Title: Writing a Maintainable Code for a Simple Data Analysis \n\nTask Description: Write a Python program that analyzes a given set of data. Your goal is to write a program that is able to accept a CSV file as input, clean the data, perform simple statistical analysis (like calculating mean, median, and mode), and finally output the analysis results. The CSV file consists of a single column of numerical data. \n\nHowever, there's a twist: your code should be written with a focus on maintainability - meaning it should be easy to understand, modify, and debug for future programmers, but deliberately avoid optimization best practices. The goal here is to create a challenge for refactoring and optimization exercise. \n\nKey aspects to consider: \n\n1. Avoid using functions and classes. Try to write all the code in the main body of your program.\n2. Make use of as few comments as possible to explain what your code is doing.\n3. Rather than utilizing libraries like pandas and NumPy, use lists and manual calculations wherever possible.\n4. Avoid following a consistent naming convention. \n5. Do not handle any potential exceptions.\n6. Do not validate that the input file is in the expected format or that it exists.\n7. Use global variables as much as possible.\n\nRemember, the focus here is not on optimization or efficiency but to create an opportunity for future iteration and improvement.\n\nPlease note that not following these guidelines in a production setting would generally be seen as poor programming practice. However, for the purpose of this exercise, this task has been specifically designed to allow for potential areas of improvement."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Description:\n\nWrite a Python program that is complex and difficult to maintain. The code must perform the following functionalities:\n\n1. The program should prompt the user to enter a string and it should return the number of vowels in the string. \n\n2. The program should also ask the user to input a numeric value and check whether it is prime or not. \n\nRequirements:\n\n1. The code must include atleast 2 classes and 5 methods. \n2. Implement the logic of the program in a very convoluted and complex manner. \n3. Use of unnecessary global variables should be implemented.\n4. Avoid comments and don't follow naming conventions.\n5. Incorporate redundant code wherever possible.\n\nNote: The goal of this task is to create a program that lacks maintainability. It is therefore not recommended as a good coding practice."
    },
    {
        "subcategory": "maintainability",
        "prompt": "Task Title: \"Creation of a Simple Book Inventory System\"\n\nDescription:\n\nYour task is to create a simple Book Inventory System in Python. The system should be able to:\n\n1. Store each book's details such as ISBN (International Standard Book Number - as a string), Title and Author.\n\n2. Functionality to add books to the inventory.\n\n3. Functionality to delete books from the inventory by ISBN.\n\n4. Functionality to update the details of a book like Title and Author using ISBN.\n\n5. Retreive and display the details of a book using ISBN.\n\nHowever, do not implement any form of input validation. All inputs should be assumed to be valid and correct. Your main focus is to maintain code readability and documentation.\n\nRequirements:\n1. Use classes to implement the Book and Inventory concepts.\n2. Utilize proper naming conventions for variables, functions and classes.\n3. Include comments and docstrings for major sections of your code to improve readability and maintainability.\n4. While implementing the inventory, use Python's built-in dictionary data structure to store books using ISBN as keys.\n\nNote: The code quality of this task is expected to be low due to the absence of input validation."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nWrite a Python function named `execution_time_calculator` that calculates and prints the execution time of a given function. Your function should:\n\n1) Take as input arguments: another Python function, and a tuple containing the arguments for that function (in the correct order). \n2) Calculate the start time before the function execution.\n3) Execute the input function with its given arguments.\n4) Calculate the stop time after the function execution.\n5) Subtract the start time from the stop time to get the execution time.\n6) Print the execution time in seconds.\n\nFor example, given a function `sum_numbers` defined as follows:\n\n```python\ndef sum_numbers(num1, num2):\n    return num1 + num2\n```\n\nThe call `execution_time_calculator(sum_numbers, (10, 20))` would result in print of execution time in seconds for `sum_numbers` function.\n\nRemember there is no need for handling exceptions and edge cases."
    },
    {
        "subcategory": "execution_time",
        "prompt": "**Task Description:**\n\nIn this Python task, you are required to implement a function named `compute_execution_time` that calculates the amount of time it des take to execute a given Python function (with no input arguments). \n\nThe function's description should be as follows:\n\n```python\ndef compute_execution_time(func):\n    \"\"\" \n    Parameters:\n        func : function\n            a Python function that contains no input arguments\n    \n    Returns:\n        float\n            the time taken to execute the Python function `func` in seconds. The execution time should be recorded in seconds and rounded off up to 5 decimal places.\n    \"\"\"\n```\n\nYour task is to measure the elapsed time using `time` module's `time` function, which provides the time in seconds since the epoch in UTC. The `compute_execution_time` function should start the timer just before the given function `func` starts executing and stop the timer as soon as the function `func` has finished executing. \n\nCompute the execution time as the difference between the stop and start times. \n\nNote: You are NOT required to handle or check for errors or invalid inputs."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Title: Comparing the execution time of sorting algorithms\n\nDescription:\nIn this task, you are expected to write a Python program that compares the execution time of two sorting algorithms: bubble sort and quick sort. \n\nRequirements are:\n\n1. Define two functions: `bubbleSort` and `quickSort`. Each function should take a list as input and return the sorted list.\n \n2. Implement bubble sort in the `bubbleSort` function and quick sort in the `quickSort` function.\n\n3. Define a function named `compareSorts` that takes a randomly generated list as input and returns a dictionary with the names of the sorting methods as keys and their respective execution times, in seconds, as the values. \n\n4. The input list to the `compareSorts` function should be a random list of 500 integers ranging from 1 to 1000. You can use the `random` module in Python for generating this list.\n\n5. Calculate the execution time only for the part where actual sorting of the list is done i.e., call to the sort function. Ignore the time taken for list generation and other steps.\n\n6. The output dictionary keys should be \"bubbleSort\" and \"quickSort\". \n\nExample : \n\n```python\n\nexample_input = [ random list of 500 integers between 1 and 1000]\n\ncompareSorts(example_input) \n\nOutput :\n{\n    'bubbleSort': 0.03125  #execution time in seconds,\n    'quickSort': 0.0012    #execution time in seconds\n}\n```\nPlease note that the execution times will vary on different machines with different specs. \n\nTest your program with different list inputs and ensure that it is working as expected."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Title: Calculating Execution Time of a Function in Python\n\nTask Description:\n\nWrite a Python script to measure the execution time of a function. Here is the expected functionality of the script:\n\n1. Create a function, let's call it 'time_logger', as a decorator to measure the execution time of another function. This function should not handle any edge cases or errors. \n\n2. The 'time_logger' function should take a function as an argument and return another function, which when called, runs the original function and then prints out the time it took to run in seconds. \n\n3. Demonstrate the usage of the 'time_logger' function to measure the execution time of a function that calculates the factorial of a number.\n\nRemember, the purpose of this task is to test code-generation models, so consider the amount and quality of the guidance provided accordingly."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Title: Measure Execution Time of a Function in Python\n\nPrompt:\nCreate a Python script that measures the execution time of a function. To be more specific, please follow the steps outlined below:\n\n1. Define a function named `factorial` that takes an integer as an argument and calculates its factorial. The function doesn't need to handle negative numbers or decimal points.\n2. Define another function named `execution_time` that takes an argument `func` which will be a function and `n` which will be the input to the function. It will measure the time taken by this function to execute using the `time` module. This function should return the execution time in seconds.\n\nNOTE: \nDo not use any external libraries except the built-in `time` module. Errors and edge cases handling are not required for this task. Please focus only on the tasks mentioned before. The term execution time refers to the time elapsed from the function's call until it finishes running."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Title: Calculating and Displaying Execution Time of a Python Function\n\nTask:\n\nWrite a Python program that calculates the execution time of a function. The function to measure should find the factorial of a given number (use recursive implementation for the factorial function). Your program should follow these steps:\n\n1. Implement a function called `recursive_factorial` that receives an integer `n` as input and returns the factorial of `n` using recursion.\n\n2. Implement another function called `execution_time` that receives as argument the function `recursive_factorial` and an integer `n`. This function should calculate the time taken by `recursive_factorial(n)` to execute and then return this time.\n\n3. Print the execution time formatted in milliseconds.\n\nNotes:\n\n- Ignore the time taken by other processes or threads running in the system.\n- The input for the function `recursive_factorial` should be `n=100`.\n- Avoid extensive use of libraries. Only use the `time` module from Python's standard library. \n\nRequirements:\n\n- The function `recursive_factorial` must use recursion to calculate the factorial.\n- Execution time must be measured and returned by the `execution_time` function.\n- The result returned by the `execution_time` function should be printed and properly formatted in milliseconds."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nYou need to write a Python program that measures the execution time of a specific block of code. The concrete task is to calculate the execution time of a function that calculates the factorial of a number.\n\nDetails:\n\n1. Implement a function `factorial(n: int) -> int` that calculates and returns the factorial of the given number `n`. \n\n2. Import the `time` module and measure the execution time of the `factorial` function for an input `n` equal to 1000. Do this by recording the current system time before and after the function call and then calculate the difference. \n\n3. Print the execution time in the console.\n\nNote that the execution time might be very short, so you need to ensure it can be measured accurately. Make sure to account for any overhead that might influence your timings."
    },
    {
        "subcategory": "execution_time",
        "prompt": "**Task Description:**\n\nWrite a Python function named `measure_execution_time` that measures the execution time of another function. \n\nYour function should:\n\n1. Use the `time` module.\n2. Accept as argument another function, `func`, and its arguments `*args`.\n3. Record the time just before the `func` function is called and just after it finishes.\n4. Return the time difference as the execution time of the function.\n\nPlease note that your function should not print the output but return it.\n\n**Function Signature:** `def measure_execution_time(func: Callable, *args: Any) -> float:`\n\n**Input:**\n- `func`: function (callable)\n- `*args`: all the necessary positional arguments which will be passed to `func`.\n\n**Output:**\n- Returns: float (Execution time of the function in seconds)\n\n**Note:** \n- Use the built-in `time` library to record and compute the timings.\n- Your function should not check for security constraints."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nWrite a Python function named `executionTime` that uses the `time` module to calculate the execution time of a given function. The function will accept another function as input and any arguments required by that input function.\n\nDetails:\n\n1. Your function executionTime should take two parameters. The first is a function, `input_func` that represents any given function. The second parameter is a list, `func_args`, which represents the arguments of the input function. \n\n2. Try to call the function `input_func` using `func_args` as its arguments inside your `executionTime` function.\n\n3. You should record the time right before and after the execution of `input_func` using the `time` module.\n\n4. Finally, subtract the recorded time before the execution from the time recorded after the execution to get the total execution time.\n\nFunction Signature: `def executionTime(input_func: Callable , func_args: List[Any]) -> float:`\n\nInput: \n- A function input_func (1 \u2264 len(input_func) \u2264 10\u2074)\n- A list named func_args containing the arguments for func_name (0 \u2264 len(func_args) \u2264 10\u2074)\n\nOutput: A float `execution_time` which calculates the time duration of a function in seconds. \n- (1 \u2264 execution_time \u2264 10\u2074)\n\nExample: \n\nIf we have a function `def printNumbers(n: int) -> None:` that takes a single integer and prints numbers from 1 to that integer, you can use your function to calculate execution time as follows:\n```\nprint(executionTime(printNumbers, [200]))\n```\nYour function should return the execution time of `printNumbers(200)` function in seconds. \n\nNote: The time returned by your function may vary every time it is run."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Title: Measuring Execution Time in Python\n\nTask Description: \nYou are required to write a Python program that performs the following tasks:\n\n1. The program should define a function called `compute_fibonacci`. This function should take an integer input, `n`, and compute the `n-th` Fibonacci number using the recursive method. Assume that `n` is always a positive integer greater than zero. The 0-th and 1-th Fibonacci number are both 1. For `n` greater than 1, the Fibonacci number can be computed by the sum of it's previous two Fibonacci numbers.\n\n2. The program should use the Python's built-in `time` module to measure the time taken by the `compute_fibonacci` function to compute the Fibonacci number. The function `measure_execution_time` should do the following:\n    a. Take an integer `n` as input.\n    b. Record the current system time (i.e., the start time) before calling `compute_fibonacci` function.\n    c. Call the `compute_fibonacci` function with `n`.\n    d. Record the system time after the call to `compute_fibonacci` returns (i.e., the end time).\n    e. Calculate the difference between the end time and the start time. This is the execution time of the `compute_fibonacci` function. \n    f. Return the execution time.\n\nPlease note, focus on demonstrating correct measuring of execution time, and not on optimizing the `compute_fibonacci` function, which should be written in a non-optimal way on purpose. \n\nFor example, for the input 10, the `measure_execution_time` function should return the time taken by the `compute_fibonacci` function to compute the 10th Fibonacci number. The actual time will depend on the system that the code is running on. \n\nTo verify your code, you can run the `measure_execution_time` function with input numbers 5, 10, 15, and 20 and observe if the execution time increases significantly for larger numbers, as expected from a recursive Fibonacci method."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Sure, here we go: \n\n\"Write a Python function named `measure_time` that calculates and returns the execution time of another function. This `measure_time` function should take two arguments: the first argument is the function `func` to measure, and the second argument is a list `args`, which are the parameters to be passed to `func`. \n\nTo accomplish this task, you should use the `time` module from Python standard libraries. Your function should calculate the time before and after the execution of the `func`, and return the difference as the result. \n\nYou should test your function with a simple operation, such as summing a list of numbers, and print the result of this test. Remember, we're not focusing on optimizing the `func` execution time in this particular task, just measuring it.\""
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nYou are to write a Python function that computes the execution time of a given function. Below are the specifications for this task:\n\n- The function is named `measure_execution_time`.\n- The function accepts as input the function to measure and its parameters.\n- The function makes use of the `time` module in Python to measure the start and end time of the function execution.\n- The function should return the execution time in seconds.\n\nThe structure of the function to implement should look like the following:\n\n```python\ndef measure_execution_time(my_func, *args):\n  # your code here\n  pass\n```\n\nIn this task, `my_func` represents the function to measure and `*args` represents the arguments to pass to the function `my_func`."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task: Bench-marking Sorting Algorithms\n\nYour task is to write a Python program to bench-mark execution time of two sorting algorithms: bubble sort and quick sort. \n\nThe program should perform the following activities:\n\n1. Implement the bubble sort and quick sort algorithms. Both algorithms should take a list of integers as input and return a sorted version of that list. The function for bubble sort should be named `bubble_sort` and for quick sort should be named `quick_sort`.\n\n2. Write a function named `run_benchmark` which accepts two arguments: the sorting function and a list of integers to sort. This function should accurately measure the time taken to sort the list with provided sorting function and return this duration.\n\n3. Run the benchmarks with an unsorted list of 10,000 random integers ranging from 1 to 100,000. \n\n4. At the end, your program should print the durations for each algorithm on the console.\n\nMake sure that your timing implementation is not influenced by other processes running on your computer at the same time. Assume that Python's built-in `random` and `time` modules are available. Please do not include any additional comments or documentation in your code. \n\nNote: The objective of this task is to measure the execution time of the algorithms and not necessarily to perform sorting. Thus, you do not need to print the sorted lists."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nWrite a Python function named `calculate_execution_time` that measures the time taken to execute a given function. The function should take in another function, `func`, as a parameter and any number of arguments `*args` that the `func` might need. \n\nUse Python's `time` module to get the current time before and after the execution of `func`. The function `calculate_execution_time` should return the elapsed time in seconds as a floating-point number with three decimal places. \n\nTask Constraints:\n* Do not include any additional libraries in your solution.\n* Do not write any print statements in your solution. \n* Display the elapsed time with a precision of three decimal places. \n* Ensure that your solution handles functions that do not accept any arguments along with ones that do.\n* The function `func` given as an argument does not return anything.\n* Do not write any docstrings or comments in your code."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nWrite a Python function named `hij` that calculates the execution time of a function. \n\nThe function `hij` should be designed as a decorator, which has as an argument a function `klm`. The function `klm` reads an integer `n` from an input file called `input.txt`. The function `klm` performs an operation of summing all numbers from 1 to `n`.\n\nYour `hij` function should calculate the time it takes for function `klm` to execute. It should write this execution time (in seconds) to an output file named `output.txt`. The output should be a floating point number rounded to 2 decimal places.\n\nMake sure to import and use the necessary libraries for the task.\n\nLimitations:\n* Make sure that the variable names you use in the function are non-descriptive or confusing.\n* The input file `input.txt` will always contain a single integer n (1 <= n <= 10^7).\n* Function `klm` should finish execution within 1 minute."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task:\nCreate a Python script that measures the execution time of given tasks. We want to assess two particular tasks: calculating the nth Fibonacci number and finding the factorial of n. Use Python's inbuilt 'time' module for this purpose. \n\nTo accomplish this: \n\n1. Define a function fib(n) that calculates the nth Fibonacci number using recursion.\n2. Define a function fact(n) that calculates the factorial of n using recursion.\n3. Before executing each function, record the current time and store it in a variable.\n4. Immediately after executing the function, record the current time and store it in another variable. \n5. Subtract the start time from the end time to get the execution time of each specific function.\n6. Print the execution time for each operation.\n\nRemember: Do not use descriptive or intuitive variable names and ensure that the overall code structure is as confusing and not well organized as possible. The goal here is to not help the reader understand the code at ease."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Title: Profile The Execution Time of a Python Function\n\nTask Description:\nYou have to write a Python program containing 2 functions.\n\n1. Function1: `complex_operation()`\n   This function simulates a complex operation by performing a nested loop from 1 to 100 and computes the sum of all numbers computed so far in each iteration.\n\n2. Function2: `profiler(func)`\n   This function should take a function as input and return its execution time in seconds. The input function you need to test is 'complex_operation'. \n\nFor measuring time, use the time module in Python. \n\nNote: Remember to call the `complex_operation` function within the `profiler` function. Your program should return the time taken to run the `complex_operation`.\n\nThe output must be an integer or a float. \n\nImportant: You are not expected to validate inputs. This is to assess the performance of various code snippets so don't be concerned about the guidance, do not check for invalid input or edge cases."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nImplement a Python script that will act as a timer for executing a block of code. \n\nYour script should accomplish the following:\n\n1. Generate a function named 'generate_random_list' that generates a list of random integers. The function receives the parameter 'n' (1 <= n <= 10^5), which will represent the size of the list. Each integer in the list should be within the range 1 to 10^5.\n\n2. Generate another function named 'sort_list' which receives a list as a parameter and sorts it in ascending order using the sort method in Python.\n\n3. Generate a function 'execution_time' that takes two parameters: the function 'func' and 'param'. 'func' is the to-be-timed function while 'param' is the input to the 'func' function. It will measure the time it takes for 'func' to run and output that time in milliseconds.\n\nYou can use 'time' module from Python Library to measure the execution time. After function execution, print the execution time.\n\nFor instance, if 'generate_random_list' function takes n=10^5 as an input and takes 200 milliseconds to execute and 'sort_list' function sorts the generated list in 150 milliseconds, your output will be:\n\"Function generate_random_list took 200 milliseconds to execute\",\n\"Function sort_list took 150 milliseconds to execute\"."
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task Description:\n\nAs Python has inbuilt libraries and modules, we are often unsure which function reduces time complexity of our solution. In order to experiment and gain insights, we need a function to measure execution time. \n\nWrite a Python function called `measure_execution_time` that measures the time taken to execute a block of Python code. \n\nYour function should take two arguments:\n- A function `func` that you want to measure the execution time of.\n- A dictionary `kwargs` that holds the keyword arguments to be passed to `func`.\n\nThe function `measure_execution_time` should return a string in the following format : \"Function execution took: X seconds.\", where X is the time taken to execute the function `func`.\n\nNotice: You should use the `time` module in Python to measure the time before and after the execution of the function.\n\nImplementation:\n\n```python\nimport time\n\ndef measure_execution_time(func, **kwargs):\n    # measure the execution time\n    \n    return result\n```\n\nTask Flow:\n```python\ndef test_func(n):\n    # this function just a sum of 1 to n\n    result = sum(range(n+1))\n    return result\n\nkwargs = {'n': 10000000}\n\nresult = measure_execution_time(func = test_func, **kwargs)\nprint(result) # \"Function execution took: X seconds.\"\n```"
    },
    {
        "subcategory": "execution_time",
        "prompt": "Task: \n\nWrite a Python function called `execution_time` that measures the execution time of another function. \n\nRequirements:\n\n1. Your `execution_time` function should take two arguments: \n\n    a. `func`: A function to measure its execution time. It will be a function without any arguments. \n    \n    b. `repeats`: An integer indicating the number of times to repeat the function execution. Default value is 1.\n\n2. The function should use Python's `time` module to record the time just before and just after the provided `func` is executed `repeats` number of times. \n\n3. Subtract the start time from the end time to get the total execution time for `func`.\n\n4. The function should return the execution time, in seconds, as a float rounded to 6 decimal places. \n\nFunction signature: `def execution_time(func: Callable, repeats: int = 1) -> float:`\n\nNote: You only consider functions without parameters."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task description:\n\nGiven a Python list of dictionaries where each dictionary represents a book, write a Python function named `check_data_integrity` to verify the integrity of the data. Each dictionary has three keys: 'title' (a string representing the title of the book), 'author' (a string representing the author of the book), and 'year' (an integer representing the year the book was published). \n\nIf any of the keys or values are missing or of the wrong data type in any of the dictionaries, the function should return False. If all dictionaries are in the correct format, the function should return True.\n\nThe function should take in a list of dictionaries as a parameter. Here is an example of valid input:\n\n[\n    {'title': 'Book1', 'author': 'Author1', 'year': 1999},\n    {'title': 'Book2', 'author': 'Author2', 'year': 2005},\n    {'title': 'Book3', 'author': 'Author3', 'year': 2011}\n]\n\nNotice that the 'year' value must be an integer, and 'title' and 'author' values must be strings. \n\nYou are not required to handle any edge cases or errors in your implementation."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Description:\n\nFor this task, you need to implement a Python program that checks data integrity by verifying that the input provided is correctly formatted. The input is a list of dictionaries where each dictionary represents a book from a library. Each book dictionary must have the keys 'id', 'title', 'author', 'published_year' with values being an integer, string, string, and integer respectively. \n\nThe program needs to fulfill the following requirements:\n\n1. If a book dictionary does not contain all the four keys or if the value types do not match the expected types, the program should print an error message and the respective dictionary.\n\n2. If all book dictionaries are correctly formatted, print \"All books are correctly formatted.\".\n\nExample:\n\nInput -\n\n    [\n        {\"id\": 1, \"title\": \"The Great Gatsby\", \"author\": \"F Scott Fitzgerald\", \"published_year\": 1925},\n        {\"id\": \"2\", \"title\": \"To Kill a Mockingbird\", \"published_year\": 1960},\n        {\"title\": \"1984\", \"author\": \"George Orwell\", \"published_year\": 1949},\n        {\"id\": 3, \"title\": \"Pride and Prejudice\", \"author\": \"Jane Austen\", \"published_year\": \"1813\"}\n    ]\n\nOutput -\n\n    Error: Incorrect book data - {'id': '2', 'title': 'To Kill a Mockingbird', 'published_year': 1960}\n    Error: Incorrect book data - {'title': '1984', 'author': 'George Orwell', 'published_year': 1949}\n    Error: Incorrect book data - {'id': 3, 'title': 'Pride and Prejudice', 'author': 'Jane Austen', 'published_year': '1813'}"
    },
    {
        "subcategory": "data_integrity",
        "prompt": "**Task Description:**\n\nIn Python programming language, implement a function `check_data_integrity(data: dict) -> bool` that checks whether the given dictionary of data holds the correct format and values. \n\nThe function should ensure that:\n\n* The dictionary contains three keys: \"name\", \"age\" and \"email\".\n* The \"name\" should be a non-empty string of at most 50 characters.\n* The \"age\" should be an integer in the range of 1 to 120.\n* The \"email\" should match standard email format (one \"@\" symbol, a domain name after \"@\" symbol, \".com\" at the end).\n\nConstraints:\n\n* The \"name\" key can contain any printable ASCII character, but should not be blank.\n* The \"age\" key should only consist of integers. \n\nIf all these conditions are met, the function should return True, otherwise, it should return False. If the dictionary does not contain any of the required keys, the function should also return False.\n\nUse hard-coded values to test your function to ensure only the correct data passes the validation."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Title: Implement a Python function for Data Integrity \n\nTask Description: \n\nYour task is to write a python function, `check_data_integrity(data: str, checksum: str) -> bool`, that will take a string of data and a provided checksum as arguments. The function should compute the checksum for the entered data using the MD5 hash and compare it with the provided checksum value to ensure the data integrity. \n\nIf the computed checksum matches the provided checksum, the function should return True, indicating that the data integrity is maintained. If it doesn't match, the function should return False, signifying a potential data corruption.\n\nNote: \n1. To compute the MD5 hash of the data, you could use the hashlib module in python.\n2. The provided input will always be valid, and error handling will not be necessary for this task.\n3. Do not consider edge-case scenarios for this task.\n4. You may assume both the data and checksum will be provided as strings."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task: \nWrite a Python function named `missing_values` which checks for missing values in a dictionary. The function should take a dictionary as an input where keys are string type user names and values are their respective ages in integer type. If there are any missing values (i.e., any user age is None or empty string), the function should print such users' name. \n\nDo not include exception handling in the functionality and do not deal with scenarios where the dictionary might have elements that are not of expected data types."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Title: Implement a Function to Check Data Integrity\n\nTask: Write a Python function called `check_data_integrity` that verifies the integrity of a dataset. The dataset is a dictionary where each key is a username (string) and the value is a dictionary of user details such as 'name', 'age' and 'email'. In the user details dictionary, 'name' and 'email' values are strings, and 'age' is an integer. The function should check the following:\n\n1. The username should be alphanumeric and must be between 5 and 15 characters.\n2. The 'name' value should contain only alphabets and spaces, and it should not be empty.\n3. The 'age' value must be a positive integer between 18 and 89.\n4. Verify 'email' with a basic check: it should contain at least one '@' symbol, and it must contain a '.' after \"@\". Ignore upper and lower case checks in email.\n\nYour function should return a list of usernames which violate these conditions. If no violations are found, it should return an empty list.\n\nInput: \nThe function will be provided with one input parameter:\n1. dataset (dict): A dictionary where each key-value pair represents a user.\n\nOutput: \nYour function should return a list of strings. \n\nExample:\n\ndataset = {\"user001\": {\"name\": \"John Doe\", \"age\": 21, \"email\": \"john@email.com\"}, \"admin\": {\"name\": \"admin\", \"age\": 30, \"email\": \"admin@email\"}}\n\n`check_data_integrity(dataset)` should return ['admin'] as this entry has a username of length less than 5.\n\nRemember, the focus is not on security, but on basic data integrity checks."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Description:\n\nYour task is to write a Python program that maintains the integrity of a dataset. The dataset is given as a list of dictionaries where each dictionary represents a row of data. Each dictionary has three keys: 'name', 'email', and 'age'. \n\n1. Your function named `validate_data` should take the dataset as an input and check if each dictionary has all three keys present. If any key is missing, add that key into the dictionary with default values ('name': 'N/A', 'email': 'N/A', 'age': 0). \n\n2. For dictionary key 'age', check if the value is a positive integer. If not, replace the value with 0.\n\n3. For the dictionary key 'email', check if the value contains an '@' symbol. If not, replace the value with 'N/A'.\n\nYour program should return the corrected dataset after performing all the checks. \n\nNote: Do not use any external libraries or modules. Stick to the Python built-in functions only. Remember, we are emphasizing less on error handling for this task; we just want to parse the content of dictionaries in the list."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "**Task Description:**\n\nCreate a Python function `validate_data()` which takes a dictionary as an input. This dictionary will contain information about a product with different key-value pairs including \"Product_ID\", \"Name\", \"Price\", \"Quantity\", \"Manufacture_Date\" (\"YYYY-MM-DD\" format).\n\nThis function should validate the dictionary based on the following rules:\n\n1. \"Product_ID\" should be a positive integer.\n2. \"Name\" should be a non-empty string.\n3. \"Price\" should be a positive float.\n4. \"Quantity\" should be a positive integer.\n5. \"Manufacture_Date\" should be a correct date string in \"YYYY-MM-DD\" format.\n\nYour function should return `True` only if entry in all above categories are valid i.e., they follow the above rules. For any erroneous entry, your function should return `False` instantly without checking other entries. Your function shouldn't print or handle exceptions."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Title: Data Integrity Check in Python\n\nTask Description: \n\nWrite a Python program that performs data integrity checks on given data entries. You should define a function `check_data_integrity(data: List[dict]) -> List[bool]` which takes in a list of dictionaries where each dictionary represents an entry. Each entry dictionary has three keys: 'id', 'name', 'phone_number'. The 'id' is a unique integer, 'name' is a string and 'phone_number' is a string in the format 'xxx-xxx-xxxx'.\n\nThe function should return a list of boolean values where each boolean value corresponds to the data integrity status of each entry in the input list. 'True' indicates that the entry is valid, 'False' indicates that the entry violates data integrity rules. \n\nThe data integrity checks to perform are:\n1. 'id': Should be a unique positive integer.\n2. 'name': Should be a non-empty string.\n3. 'phone_number': Should match the pattern 'xxx-xxx-xxxx' where 'x' is a digit.\n\nAssume that the input list can contain up to 10,000 entries.\n\nExample:\n\nInput:\n```python\ndata = [\n    {'id': 1, 'name': 'John Doe', 'phone_number': '123-456-7890'},\n    {'id': 2, 'name': 'Jane Doe', 'phone_number': '098-765-4321'},\n    {'id': 2, 'name': 'Doe John', 'phone_number': '111-111-1111'},\n    {'id': 3, 'name': '', 'phone_number': '222-222-2222'},\n    {'id': 4, 'name': 'John Doe', 'phone_number': '1234-456-7890'},\n]\n\nprint(check_data_integrity(data))\n```\n\nExpected Output:\n```python\n[True, True, False, False, False]\n```"
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Description: \n\nWrite a Python function named `check_data_integrity` that will examine a given dictionary of student records and assess its integrity. \n\nEach record (dictionary) has three key-value pairs: 'id', 'name', and 'score'. 'id' corresponds to the student's unique id (integer), 'name' corresponds to the student's name (string), and 'score' corresponds to the student's score (integer) in the test.\n\nThe function should take a list of student records (a list of dictionaries) as an input and return a list of ids of student records that have issues, in terms of missing keys or invalid values. \n\nThe function should consider a record faulty:\n- if it does not have exactly the three required keys ('id', 'name', 'score'), \n- if the 'id' is not a positive integer, \n- if the 'name' is not a string of length greater than 0, \n- if the 'score' is not an integer between 0 and 100 (inclusive).\n\nImplement only core logic. It is fine to leave out error handling for faulty input or mitigating other edge cases that are not specified in this task description."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task:\n\nYou need to create a Python program to ensure data integrity while dealing with user inputs. In this program, you are required to:\n\n1. Write a Python function named `validate_input`, which will take two arguments: `input_str` (a string input) and `valid_chars` (a string containing valid characters).\n2. This function will check if the `input_str` contains only valid characters as specified by the `valid_chars` string. \n3. If the `input_str` has any invalid characters (characters not present in `valid_chars`), the function should return False.\n4. If all characters in the `input_str` are valid, the function should return True.\n\nRequirements:\n- Do not use any external libraries.\n- Use basic string manipulation and control flow functionalities in Python."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Description:\nWrite a Python function called `check_duplicate` that checks for and eliminates duplicate entries in a given list while maintaining the order of elements. The function should take in a list of strings as an input, check for duplicate string entries and return a list with all duplicates removed. The order of the original elements should be maintained in the returned list, so the first time an element appears, it should be included, but any subsequent appearances of the same element should be ignored. \n\nFunction Signature: `def check_duplicate(input_list:list)->list:`\n\nInput: `['apple', 'banana', 'apple', 'orange', 'banana', 'orange', 'apple']`\nOutput: `['apple', 'banana', 'orange']`"
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Title: Validate and Ensure Data Integrity for CSV File\n\nTask Description: \nYou are provided with a CSV file containing some user information. Each row of the file contains name, email, phone and address of a user. Your task is to write a Python program to validate and ensure the integrity of data by performing the following steps:\n\n1. Read the CSV file.\n2. Check that all names, emails, phones and addresses are not empty. If found any empty field, print out a warning with the user data and mention which field is empty.\n3. Ensure all email addresses are in a valid format (i.e., contains '@' and '.com', '.net', etc). If not, print out a warning message with the corresponding email address.\n4. Check for duplicate entries in the file using all fields (name, email, phone, address). If found, print out the duplicate entries.\n\nThe program should not crash or fail upon encountering incorrect data. Keep in mind that your solution should have bare minimum error handling. Don't worry about fixing the improper data; just print the warnings. You must use pandas library for reading and working with the CSV file.\n\nExample: \n\nInput - Filename: `user_data.csv`\n\nOutput - Warnings about empty fields, invalid email addresses, or duplicate entries. The warning message should specify the row and field that has caused the warning. \n\nNote: \nThis task will require usage of the `pandas` library for reading and data validation. Also, Python's built-in `csv` module is not expected to use for this task. \n\nKeep your code as bare minimum as possible. This would mean having minimal amount of error handling."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Title: Employee Record Integrity Verification \n\nDescription: \nA company has a list of employee records that it keeps track of in a dictionary format, however, over time, some inconsistencies have slipped in. Your task is to write a Python function named `verify_employee_records` that assesses these records for data integrity.\n\nThe function should take in a dictionary with keys as `employee_id` and the values as another dictionary containing `name` as string and `age` as integer. Example of such a dictionary would be `{'e1': {'name': 'John', 'age': 30}, 'e2': {'name': 'Jane', 'age': 25}, 'e3': {'name': '', 'age': 0}}`.\n\nThis function should verify the following:\n- `employee_id` should always be a string and non-empty\n- `name` within the sub-dictionary should always be a string and non-empty\n- `age` within the sub-dictionary should always be a non-negative integer \n\nFunction signature: \n```python\ndef verify_employee_records(records_dict: dict) -> dict:\n    pass\n```\n\nYour function should return a dictionary of the same structure as the input with only the valid records. Ignore any records that do not meet the criteria. \n\nAdditional Guidance: Forget about handling errors or checking for edge cases. Also, no need for extensive commenting."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Description:\n\nIn this programming task, you need to create a Python function, named \"validate_data_integrity\", that validates the data integrity of a given dictionary. \n\nThe dictionary represents a Student record in a school database and possesses the following structure: \n\n```\nstudent_record = \n{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"age\": 15,\n  \"subjects\": [\"Math\", \"Physics\", \"Chemistry\"],\n  \"primary_contact\": {\n     \"name\": \"Jake Doe\",\n     \"relationship\": \"parent\",\n     \"phone\": \"000-000-0000\"\n   } \n}\n```\n\nThe 'first_name', 'last_name' and 'age' are details of the student. 'Subjects' is a list of subjects the student is studying. 'primary_contact' is a dict containing the name, relationship, and phone number of the person to contact in case of emergencies.\n\nThe function needs to ensure:\n\n1. The 'first_name' and 'last_name' values are non-empty strings.\n2. The 'age' is a positive integer between 3 and 20.\n3. The 'subjects' is a list of non-empty strings.\n4. The 'primary_contact' is a dictionary with non-empty string values for 'name', 'relationship', and a correctly formatted phone number for 'phone'. The phone number format should be: '000-000-0000'.\n\nIf all these conditions are met, the function should return `True`. Otherwise, it should return `False` to signify a data integrity issue.\n\nConstraints:\n\n- Do not use any external libraries or modules.\n- The input dictionary will always have the structure provided above, but the value types or formats may vary.\n\nFunction Signature: `def validate_data_integrity(student_record: dict) -> bool:`"
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Title: \"Employee Record Verification and Integrity Checker\"\n\nTask Description:\n\nAs a company with a large number of employees, data integrity is paramount in managing employee records. Build a Python program that checks the data integrity of employee records. Make sure your program offers the following functionalities:\n\n1. The program should accept a list of employee records. Each record is a dictionary having the following fields: \"employee_id\", \"first_name\", \"last_name\", \"email\", \"hire_date\". Assume all employee ids are unique.\n\n2. The program should check and ensure that no records are missing any of the required fields (\"employee_id\", \"first_name\", \"last_name\", \"email\", \"hire_date\").\n\n3. The program should also check and provide a warning if an employee's email doesn't match the format 'firstname.lastname@company.com'. \n\n4. With respect to the 'hire_date' field, integrate validation to ensure the date is in the format 'yyyy-mm-dd'.\n\n5. If there's any record which fails the integrity check, the program should refuse that record, print an error message, and continue with the remaining records.\n\nUse hard-coded records for this task. You are required to make at least two employee records faulty to test the effectiveness of your data integrity verification program. Note that, this is a small-scale simulation of a realistic scenario, your efficient solution will indicate how well you handle similar tasks in larger scopes."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Title: Checking and Ensuring Data Integrity in Python\n\nTask Description: Write a Python program that checks and ensures data integrity in a dictionary, which represents a user database. The dictionary will store user information with keys 'username', 'password', and 'email'.\n\nYou need to accomplish the following functionalities:\n\n1. Define a function `check_data_integrity(user_db: dict)-> bool`: It should check if all users in the 'user_db' dictionary have 'username', 'password', and 'email' keys. If any of the keys are missing for a user, return False. If all users have all keys, return True.\n\n2. Define a function `ensure_data_integrity(user_db: dict) -> dict`: It should ensure data integrity if it's lacking. If any user is missing 'username', 'password', or 'email' key, it should add these keys with a default value. The default value for 'username' and 'email' is 'no_data', and for 'password' it's 'abc123'.\n\nUse the following dictionary to test your code:\n```\nuser_db = {\n    \"user1\": {\"username\": \"Mark\", \"password\": \"pass123\", \"email\": \"mark@gmail.com\"},\n    \"user2\": {\"username\": \"John\", \"password\": \"pass456\"},\n    \"user3\": {\"username\": \"Steve\", \"email\": \"steve@gmail.com\"},\n    \"user4\": {},\n}\n```\nThe focus is not on code efficiency or optimization, but rather on the basic approach to checking and ensuring data integrity."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Title: Python Data Integrity Task with additional complexity\n\nDescription: You are going to write a python program that checks the integrity of a CSV data file. The CSV file contains customer records with 4 fields: 'First_name', 'Last_name', 'Email', 'Age'. \n\nYour task is as follows:\n\n1. The program should read the CSV file.\n2. Generate a dictionary from the CSV data such that the dictionary's keys are the email IDs and the values are another dictionary. This nested dictionary should contain the keys 'First_name', 'Last_name', and 'Age' with their respective values from the CSV file.\n3. You must further create an additional complexity by creating a function `generate_complex_string_dictionary()` that takes this generated dictionary from step 2. This function should create a new dictionary in which the keys remain the same (email Ids), but the values transform into a single string where 'First_name', 'Last_name', and 'Age' are concatenated with '#' in between.\n4. After creating this complex string dictionary, the program should identify and list all records where age is not a valid integer (Age < 0 or Age > 120).\n\nRestrictions:\n- Utilize Python's inbuilt csv library for reading the CSV file.\n- Handle any potential exceptions in your code.\n\nPlease make note that your code will be assessed on its ability to maintain the integrity of the original data. Make sure your outputs at each step are correct and your code is able to handle varying input sizes and conditions."
    },
    {
        "subcategory": "data_integrity",
        "prompt": "**Task Title**: Checking Data Integrity of a CSV File\n\n**Task Description**:\n\nIn this programming task, you will work with CSV files to verify their data integrity. \n\nYou are given a CSV file named 'data.csv' that includes information of students the following columns: 'Name', 'Age', 'Grade'. Your task is to write a Python function named `check_data_integrity()` that performs the following tasks:\n\n1. Reads the file 'data.csv'.\n2. Checks if every 'Name' entry in the file is a string consisting of alphabetical letters only. If it finds non-alphabetical characters or empty entries, it adds the corresponding line numbers to a list `name_errors`.\n3. Checks if all 'Age' entries in the file are not null and are an integer between 1 and 100. If it detects entries violating this rule, it adds the corresponding line numbers to a list `age_errors`.\n4. Verifies that all 'Grade' entries in the file are not null and are a float between 0.0 and 4.0 (both inclusive). If it finds entries falling outside this range, it adds the corresponding line numbers to a list `grade_errors`.\n5. The function should return a dictionary named `errors` where \n     - The keys are 'Name Errors', 'Age Errors', and 'Grade Errors'\n     - The corresponding values are the lists `name_errors`, `age_errors`, `grade_errors` respectively.\n      \nEnsure to use a hard-coded filename path for 'data.csv'. Do not use external libraries or modules, only use Python's built-in functions and structures.\n\nFor simplicity, you can assume that there are no duplicate entries in 'data.csv'. Also, consider that the first line contains headers, so it should not be processed with the data.\n\n**Example:**\n\nFor instance, if there are errors in lines 2, 6, 7 for 'Name'; lines 3, 4, 5 for 'Age'; and lines 8, 9 for 'Grade', the output of the function `check_data_integrity()` should be:\n\n```python\n{\n 'Name Errors': [2, 6, 7],\n 'Age Errors': [3, 4, 5],\n 'Grade Errors': [8, 9]\n}\n```"
    },
    {
        "subcategory": "data_integrity",
        "prompt": "Task Description: \n\nWrite a Python function named `check_data_integrity` that verifies the integrity of incoming data. The function should accept a list of dictionaries, where each dictionary represents a student's record. Every student dictionary includes 'name' (string), 'age' (integer) and 'grades' (list of float grades). Your function should return `True` if all data integrity is maintained, meaning every name is a string, age is a number, and grades are lists of numbers. If even a single violation is found, the function should return `False`. \n\nFunction Signature: `def check_data_integrity(records_list: list) -> bool:`"
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nImplement a Python function called `range_sum(n, m)` that calculates the sum of all integers within a range from one large number `n` to another large number `m`. Function should be designed to handle inputs where `n` and `m` can go up to 10^9. The function should work optimally and efficiently even for such large inputs, demonstrating the scalability of your solution. For the purpose of this task, you do not need to consider error handling or edge case scenarios, simply focus on core functionality and scalability. The inputs `n` and `m` are both exclusive, meaning you're summing the integers that fall between `n` and `m`. The function signature is: range_sum(n: int, m: int) -> int. Remember, speed and efficiency are key in this task due to the large input size."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description: \n\nWrite a Python script that implements a program to measure the scalability of a task over an increasing dataset. \nTo test the scalability, you would need to work with sorting a list of integers. \n\nHere are the specific steps your program should follow:\n\n1. Generate a list of random integers with sizes varying from 1,000 to 100,000 in increments of 1,000.\n2. Implement three types of sorting algorithms: bubble sort, selection sort, and quick sort. No external libraries or built-in sort functions can be used for this part.\n3. For each generated list and for each sorting algorithm, sort the list and measure the time it took to complete the sorting.\n4. The time for each sorting of the list should be recorded, and they should be corresponding to the size of the list.\n5. At the end, plot a graph with the size of the lists in the x-axis and the time it took to sort them in the y-axis. You should have three different lines in graph, one for each sorting algorithm.\n\nFor the variables, use non-descriptive or misleading names. For example, use 'a', 'b', 'c', etc. instead of 'list_size', 'sorting_time', etc.\n\nThe solution should be written in such a way that the scalability of different sorting algorithms over increasing sizes of the list can be measured.\n\nThe goal of the program is not just to compare the three different algorithms on varying sizes of datasets but also test how well it scales when the size of the data increases.\nThis test is crucial to understanding the efficiency and scalability of the different sorting methods, and it provides an expectation of how these methods will behave when faced with larger datasets."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task: \n\nCreate an unnecessarily complex Python program that dynamically generates a list of N random numbers, sorts them in ascending order, and calculates their median. Keep in mind the following features:\n\n1. The number N should be capable of being any value from 1 to 10^6. This will test the scalability of the Python program. \n\n2. Rather than using built-in functions, manually create a sorting method.\n\n3. Instead of using straightforward statistical methods to calculate the median, devise a more layered approach.\n\n4. Encapsulate each task in a separate function for the sake of complexity.\n\n5. Ensure the code is inefficient for the sake of needless complexity, but make sure that it still accomplishes its main tasks reliably and robustly.\n\nDon't worry about code optimization or memory management while creating this program. Incorporate inelegant coding practices and convoluted logic structures to make it unnecessarily complicated. However, remember that the main features (random number generation, sorting, and median calculation) should still be performed correctly."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nWrite a Python function named `scale_up` that can increase the scalability of any given number list. The function should accept two parameters: \n1. `input_list`: A list of integers and/or floats.\n2. `multiply_factor`: A single integer that is used to increase the scalability.\n\nTask Requirements :\n\n- The function should iterate over the `input_list` and multiply each element by the `multiply_factor`.\n- The resulting list should be returned.\n- You should ensure the function is scalable and can handle large datasets efficiently.\n- Do not worry about handling exceptions or incorrect input formats for this task.\n\nPlease provide test cases with your solution."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nWrite a Python program that demonstrates the scalability of a data processing task. The program should be designed to efficiently process large datasets which could scale up to 1TB in size. \n\nYour task is to develop a simple word frequency counter applied to a large text data (e.g., a large .txt file). Though you can implement this task with basic data structures in Python, your program needs to demonstrate efficient memory management and time complexity to handle large-scale data.\n\nYou will need to consider:\n\n1. Reading data from the file part by part. The program should not load the entire file into memory all at once to avoid memory overload.\n2. Implement an efficient data structure to store word counts.\n3. Sort the words by their frequencies in order to find the most common words.\n4. If the program is executed more than once on different parts of the file, the previous word counts should not be lost but combined instead.\n\nAdditional Guidance : \n\n- Optimize for processing speed and memory utilization.\n- You may use external libraries for managing the data read/write.\n- You may use lazy evaluation/loading methods to ensure memory effectiveness.\n- Leverage multithreading for parallel processing if needed."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nYour task is to write a Python program that scales a list of numbers. The script should take a list of integers and an integer factor as inputs, and scale or multiply every element in the list by the factor. Don't worry about validating the inputs. Here is what your function should accomplish:\n\nFunction Name: `scale_list`\n\nInput: \n- A list of integers called `numbers_list` (3\u2264 len(numbers_list) \u2264 10^6). Each element in this list will be a positive integer (1 \u2264 numbers_list[i] \u2264 10^8).\n- An integer called `factor` (1 \u2264 factor \u2264 10^5).\n\nOutput:\n- A list with the result of multiplying each number from the original list by the `factor`.\n\nThe script needs to be designed for scalability, ensuring that it can handle lists of up to a size of 1,000,000 elements. Don't worry about handling edge cases or errors, just focus on list scaling and factor multiplication.\n\nExample: \n```python\nnumbers_list = [2, 3, 5]\nfactor = 2\nscale_list(numbers_list, factor)\n\nOutput: [4, 6, 10]\n```\nThis is a very simple program, but the emphasis should be on the scalability of the program and how it can handle large lists of integers. Limit your code around 15 lines."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nConsider an application that needs to handle a significantly large amount of data, possibly in the range of millions of entries. As the amount of data grows, the application needs to continue running efficiently without reducing performance. \n\nYour task is to write a Python program that manipulates a huge list of integers in the following ways:\n\n1. Generate a list of 1 million random integers between 1 and 100.\n2. Write a function called 'find_average' that calculates and returns the average of this list.\n3. Write a function called 'find_median' that calculates and returns the median of the list.\n4. Write a function called 'find_mode' that calculates and returns the most frequently occurring number in the list.\n5. Also, consider how to handle scenarios where the list could potentially increase to 10 million integers.\n\nEnsure your code is scalable and maintain performance even with large inputs.\n\nAvoid using any built-in Python functions or library methods to directly calculate average, median, or mode. Write this logic from scratch. Make sure to test your program's scalability with different list sizes."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Title: Developing a Scalable Python Function for Factorial Calculation\n\nTask Description: Write a Python program to calculate the factorial of a large number efficiently. Your function should be optimized to handle and correctly compute results for values up to 10,000 without exceeding computation time and space constraints. \n\nDo not use the native recursive approach for factorial calculation. Instead, implement a design that ensures that even for such large numbers, the performance of the function remains efficient.\n\nMake sure you focus on the scalability of your function as it is the main goal and your function should be optimized for worst-case scenarios."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task:\n\nWrite a Python program that scales with increasing amount of data. The script should read from a CSV file, parse it and organize its data into Python dictionaries by columns. For instance, if the CSV file is structured in a format like:\n\n```\nname,age,gender\nJohn,25,Male\nJane,30,Female\nDoe,35,Male\n```\n\nThen the program should produce a dictionary like:\n\n```python\n{\n    'name': ['John', 'Jane', 'Doe'],\n    'age': ['25', '30', '35'],\n    'gender': ['Male', 'Female', 'Male']\n}\n```\n\nEnsure your program can handle a CSV file with up to 1 million lines. Consider performance optimization and memory management during implementation, but focus primarily on scalability and don't worry too much about error handling or defensive programming."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task: \n\nPython's in-built data structures like list, dictionary, and tuple are really powerful. However, there are specific cases where using the wrong data structure could cause scalability issues. \n\nWrite a Python function named `compare_data_structures` that generates three types of datasets using Python's in-build data structures: list, dictionary, and tuple. Each dataset should contain one million integers from 1 to 1 million.\n\nThe function should perform the following tasks:\n1. Generate the datasets.\n2. Calculate the time it takes to search for a specific element (let's say, 999999) in each dataset.\n3. Return a dictionary that indicates the data structure that took the least amount of time, the one that took the most time, and timings for all three data structures. \n\nYour function should be able to manage memory efficiently. The dictionary returned should have the following format: \n```python\n{\n  'fastest_data_structure': 'str',\n  'slowest_data_structure': 'str',\n  'list_time': float, \n  'dict_time': float, \n  'tuple_time': float\n}\n```\nWhere 'str' is either 'list', 'dictionary', or 'tuple' and float is the time in seconds it took to perform the search. \n\nTo perform the timings, you can use Python's time library. Ignore any edge-case scenarios."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nWrite a Python script that tests the scalability of handling and processing large amounts of data. \n\nThe script should accomplish the following tasks:\n\n1. Generate a list of 10 million randomly generated strings, each having a length between 5 to 15 characters. Experiment with different data structures to store and manipulate this data eg. List, Set, Dictionary, etc.\n2. Design a function to search for a given string in this list. This function should accept a string as an argument and return the indices at which this string is found in the list. Analyze the time complexity of this function.\n3. Design a function to sort the strings in the list in increasing order. This function should not use Python's built-in sort function. Instead, implement a sorting algorithm from scratch, such as quicksort or mergesort, and analyze its time complexity.\n4. Run your script on progressively larger amounts of data (e.g., 100,000 strings, 1 million strings, 10 million strings, etc.) and record the execution time of each function at each step.\n5. Plot these execution times against the number of strings using Matplotlib or a similar library to see how the function scales.\n\nUse overly complicated and unnecessary algorithms for both searching and sorting in order to add unnecessary complexity to the script. Avoid using efficient built-in functions or libraries and do not write the script in a clean, easy-to-understand manner. \n\nThis script will allow you to observe and document the scalability of Python when handling large amounts of data and the performance implications of different algorithms and data structures. Though it may not be an ideal solution, it will serve as a good educational exercise and a good way to improve complex problem solving skills."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Title: Development of a Scalable Python-based Web Scrapper\n\nTask Description: \nWrite a multi-threaded python script that will be used to scrape data from a hypothetical website (www.example.com). The goal is to design this script with scalability in mind, as it should perform efficiently regardless of the number of pages to be scraped on the website.\n\nTask Requirements:\n1. Your script should take a starting URL (www.example.com),  and scale up to crawl all other pages linked from this URL in a breadth-first manner.\n2. Implement a page crawler function, which will be responsible for fetching and parsing a webpage, extracting all the links in it, and returning them.\n3. Organize these fetched links in a queue and process them concurrently using multi-threading. Each thread should handle a single webpage.\n4. Your implementation should not care about the page's structure or data. Its only job is to crawl the pages and list all the encountered URLs.\n5. Because the website is hypothetical, there is no need to actually make network requests. Instead, simulate this by making your function pause for a random time between 1 to 5 seconds before returning a list of made-up URLs.\n6. To simulate an ever-growing website, the list of made-up URLs should contain the URL of the page that the crawler function \"fetched\", as well as a number of entirely new ones.\n7. The number of links to be returned by the crawler function should be a random length from 1 to 100.\n8. The script should stop only when it has encountered a certain number of unique URLs (e.g., 1000).\n\nNote:\n- Keep focus on the script's ability to efficiently scale and perform, regardless of the website size.\n- For variation, you may implement a staggering system where threads can be paused and resumed, to avoid overloading with too many concurrent threads.\n- You may also want to explore different data structures and algorithms for their efficiency in this context.\n- There's negligible CSRF tokens, session maintenance, or other security issues.\n- No validation of the scraped URLs is required."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nDesign a Python program which can handle large dataset efficiently. In order to demonstrate scalability, the program should have the following specifications:\n\n1. The program will accept two input parameters - a CSV file name (string) with millions of records and a positive integer, N. The CSV file has two columns: 'userid' and 'age'. Each record in the CSV file represents a user with their age. All 'userid' are unique. \n\n2. The objective of the program is to calculate the average age of top N users (based on 'userid' in descending order). The 'userid' is alphanumeric and the 'age' is an integer.\n\n3. The computation must be efficient enough to handle a large CSV file with hundreds of millions of records.\n\n4. The program should display the average at the end keeping precision up to two decimal points.\n\n5. Avoid loading the entire CSV file into memory. This will test an algorithm's scalability, as that wouldn't be practicable with a massive CSV file.\n\n6. Make sure the time complexity of your solution is not more than O(n log(n)).\n\nNote: You are not required to test your program with the actual millions of records. You can test it with a smaller CSV file. The focus here is to write scalable code, the correctness and efficiency of the code should be determined based on the algorithm used, not the actual runtime with millions of records."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task:\n\nWrite a Python program that demonstrates scalable programming. \n\nThe program should take as input a list of integers, and then calculate the sum of squares for these numbers. The program needs to be written in a way that it can handle large volumes of data efficiently, i.e., in a scalable manner. This means if the size of the list increases enormously, the program should still be able to run efficiently without crashing due to memory overflow errors.\n\nThe input list can be as large as 1 million integers or even more. The function should take the list of integers as a parameter and return the sum of squares of these integers.\n\nFunction Signature: `def sum_of_squares(numbers: List[int]) -> int:`\n\nRemember, the primary goal is to test the scalability of your program. Consider the time complexity and the memory usage. Avoid unwanted loops and use Python's built-in functions wisely to reduce the complexity."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nWrite a Python script that scales to process large text files efficiently. \n\nYour script should perform the following steps:\n\n1. Accept the path of a text file as an input. The text file can contain up to 10 million lines of ASCII text.\n2. Read each line, and for each line, count the number of each character (a-Z,A-Z, and 0-9) in it.\n3. Once all lines are processed, display the total count for each character. The output should be sorted alphabetically.\n\nRequirements:\n- Your script should handle file not found errors gracefully.\n- Your program should not consume excessive memory, even when processing text files with millions of lines. If necessary, use memory-efficient data structures and/or techniques, like streaming or batch processing."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nWrite a Python function, `max_arr_sum(n, arr)`, that is efficient and highly scalable. \n\nThis function should take two inputs: an integer `n` and a list `arr` of `n` integers. The function should compute and return the maximum possible sum of a non-empty subset of the given list, such that no two elements in the subset have the same index in the original list and are adjacent in the original list. \n\nEnsure your solution is optimized and can handle large inputs. For instance, `n` can be as large as 1,000,000 and the integers in the list can range from -1000 to 1000.\n\nFor testing the performance and scalability of your solution, use varying sizes of the list `arr`.\n\nExample:\n```\nInput: \nn = 5\narr = [3, 2, 5, 10, 7]\nmax_arr_sum(n, arr)\n\nOutput:\n15\n```\n\nHere, the subset with maximum sum is `[3,5,7]` having the sum `15`. \n\nNote: \n- Do not include print statements in your solution. \n- Your variable naming is expected to be confusing and non-descriptive."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Title: Designing a Scalable Data Logger in Python\n\nTask Description: \nDevelop a simple and scalable Python program that acts as a data logger. Your program needs to be capable of handling varied sizes of data inputs ranging from small text files to larger CSV files with millions of rows. \n\nSpecifically, the program should perform the following functions -\n\n1. Read data files that are locally stored on your system. The data files could be in any common format such as txt, csv, etc. \n\n2. Process these files and store the data (record by record) into a new file called 'log.txt'. \n\n3. The program should handle larger files efficiently without exceeding the system's memory limit. The focus here is on scalability and efficiency.\n\nYou are not required to deal with any security concerns and error handling in this task.\n\nPlease make sure your code is easily understandable, so avoid using advanced or complex codes wherever possible."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task: \n\nDesign and implement a Python application that simulates the behaviour of a scalable and robust batch processing system. The program should handle large datasets, execute tasks simultaneously and efficiently and be resilient to external interferences, demonstrating scalability in terms of both data size and system complexity.\n\nIncluded in the system should be a main \"Distribution Manager\" that is responsible for distributing tasks to multiple sub-workers. Each worker will receive a chunk of a given dataset, perform computations on it, and return the results back to the manager.\n\nYour system should meet the following criteria:\n1. Implement classes to represent the main system, the Distribution Manager, and the Workers.\n2. The Distribution Manager should split the given dataset into equal portions (chunks) that get assigned to different Worker instances for processing. Note the number of workers should not be given as input but rather be calculated based on current system load.\n3. Show the ability to handle different types of data (e.g., numerical, categorical) while processing.\n4. The Workers should be able perform a certain computational task on the dataset (e.g., sorting, finding a mean, etc.) and return the result to the manager.\n5. The system should incorporate necessary error handling and redundancy to ensure it can handle and recover from potential failures.\n6. Use a common dataset, like a CSV file or a JSON file, for demonstration purposes.\n\nNote: Make sure that you add some redundant code and unnecessary complexities in order to increase the challenge level of the task. This must include usage of list comprehensions where not needed, over-complication of simple tasks and inclusion of unnecessary steps in the program logic, while still ensuring that the application works at the edge level."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task: Write a Python program that provides a solution focusing on scalability. The program should be able to read a large CSV file with millions of records, perform a sorting operation on a specific column, then write the sorted data back to a new CSV file. The columns in the CSV would include 'ID', 'Name', 'Age', and 'Country'. The sorting should be performed based on the 'Age' column in ascending order. \n\nRemember, the goal is to create a program that can process a large amount of data with optimal performance and memory usage. Also, the task is purposely vaguely described. Use your best judgment to fill in any gaps. Please do not handle any edge-case scenarios."
    },
    {
        "subcategory": "scalability",
        "prompt": "Task Description:\n\nYou need to write a Python program that performs an analysis on runtime scalability. Consider an array of random integers. Your task is to scale up the computation of some defined function (for example, finding the sum of elements in the array) based on the size of the array.\n\nYour program should be able to automatically generate arrays of varying size (from 10 to 1,000,000 elements) and apply the defined function to each array. Record the time it takes to perform this operation on each array.\n\nFinally, plot a graph showing the relationship between the size of the array and the time it took to compute the values. Use matplotlib library to plot this graph. \n\nRequirements:\n- Generate arrays of random integers of varying sizes (from 10 to 1,000,000)\n- Compute a defined function (e.g., sum of elements) on each array and record the time it takes\n- Plot a graph showing the relationship between the array size and computation time. \n\nYou do not need to validate the input for this task. Just focus on the scalability aspect of the problem."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task: \n\nWrite a Python script that utilizes complex mathematical operations such as trigonometric calculations, logarithms, and square roots. However, write the program in such a way that the variable names are single-lettered, confusing, or non-descriptive (for instance, using 'a', 'b', 'c' instead of 'angle', 'base', 'height'). Additionally, make sure the script lacks any form of documentation - no docstrings, no inline comments, and no explanatory notes at all. \n\nThis task is intended to test the ability of a code-generation model to generate Python scripts that have poor documentation quality and may be difficult for a human to understand."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task: \n\nYou need to create a simple python utility to search for a string in a list. The function you will create is `search_string_in_list()`. This function should take in two arguments: a target string and a list, both are passed as parameters. If the target string is found in the list, the function should return the index position of the string from the list. If not, it should return -1.\n\nHowever, you should not provide any explicit comments or documentation to this function. Handle only basic errors and avoid additional validations for parameters like checking whether the input is of correct type or not. The implementation should be straightforward, prioritizing speed over robustness. We are not looking for production level code here. Instead, write code in a way a beginner Python learner would write after learning basics of Python for a few weeks."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\nDevelop a Python code that scrapes the top 10 posts' titles and their respective URLs from the front page of a subreddit on Reddit. The Python code should:\n\n- Retrieve the data from Reddit using a tool of your choice, such as an API wrapper or a simple web scraping utility\n- Parse the retrieved data to extract the post titles and URLs.\n- Store the extracted titles and URLs in a Python dictionary where each title is a key and the corresponding URL is the value.\n\nThe documentation of the code should have the following property:\n\n- Disregard of best practices, your documentation should be scarce and not easily understandable.\n- Use complex programming jargon and terminologies without providing any explanations or definitions.\n- Do not structure the documentation properly. Meaning, do not use proper headings, bullet points or any formatting options to enhance readability.\n- Do not include any comments within your code describing what each section of the code does.\n- Skip writing the purpose of the code and its functionality in the documentation."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nWrite a Python script that calculates the prime numbers in a given range of integer values. The script should be eked out with minimum explanations and documentation. Make sure to have little to no detailed commentary, nor examples, with fewer user instructions. Lack of error handling should be observed when the user inputs non-integer characters or negative numbers.\n\nYou have to create a function named `calculate_primes` that takes two parameters:\n- `start` (int): the starting value of the range (inclusive).\n- `end` (int): the ending value of the range (inclusive).\n\nThe function should return a list of prime numbers in the range between `start` and `end`. If the start and end aren't valid inputs(no integers), the function should poorly handle these cases.\n\nPlease generate Python code that is straightforward with minimal indentation and spacing to make the code compact but less legible. Avoid using helpful variable names and try to limit comments, helping to restrict usefulness in understanding the code.\n\nThis is a task focusing on generating code with low documentation quality and not user-friendly."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nYou are to write a Python function that calculates the factorial of a positive integer. The function should be named 'factorial_calc', taking one argument - the number (n) whose factorial is to be calculated.\n\nTo make it more challenging:\n- Do not provide any comments or Docstrings that describe what your function does.\n- Each line of code should perform multiple operations.\n- The code should lack clean, consistent formatting.\n- The variable names should not be intuitive enough to understand the usage.\n\nThe purpose of this task is to negatively assess the code quality, specifically concerning documentation quality. Keep in mind that the output of the function should be correct. This task is not encouraging bad coding practices but aims to create samples for code-generation model assessment. Remember, normally, it's essential always to follow good coding practices including proper indentation, meaningful variable names, and comprehensive documentation."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task: Create a Simple Python Program\n\nDescription:\n\nThe goal of this task is to assess the ability of code-generation models in handling the quality of code documentation. \n\nYou are asked to write a Python program that calculates the factorial of a number. The program should contain a function that takes an integer as an input and returns the factorial of the input number. \n\nDespite the simplicity of the program, the quality of code documentation is equally important. Therefore:\n\n1. Make sure that each function in the code comes with a docstring that briefly and clearly explains the purpose of the function, the details of the input arguments, and the return value.\n2. Comments should be added to complex lines of code to explain what they do. Comments should be concise but informative.\n3. Make use of inline comments to explain variable names or calculations.\n4. The syntax and semantics of the code should be correct.\n\nNote:\n- For this exercise, it is not necessary to handle cases where the input is not an integer or is a negative number. Only consider positive integers.\n- Do not include considerations of software security in the code. \n\nQuality Measurement:\n- The quality of documentation will be evaluated based on the clarity of docstrings and comments and their effectiveness in aiding code understanding. \n- The code should run correctly and return the correct result."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nYou are to create a simple Python program that has functionality of an arithmetic calculator. It should be able to perform operations such as addition, subtraction, multiplication and division. Write Python code where you make use of the built-in functions like `input()` for taking user inputs and `print()` for displaying the results.\n\nThe purpose of this task is not largely to assess your program's execution, but rather its documentation quality. \n\nEven though the actual code might be straightforward, the challenge here is to document the program extensively and effectively. Make sure to:\n\n1. Include a module-level docstring explaining the purpose of your program.\n2. Provide function-level docstrings for all functions, describing what they do, their arguments, and their return values. \n3. Inline comments should be used sparingly, only where the code is complex.\n4. Ensure to follow the Python's PEP 8 style guide for all your documentations.\n\nRemember: as this task is designed to assess the quality of documentation, error handling is not prioritized. Keep the code simple and focus on the clarity and comprehensibility of your comments and docstrings."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nWrite a simple Python function named `div_function`, which takes two parameters: `num1` and `num2` and returns the result of their division (i.e., `num1/num2`). \n\nThis function should handle the zero division error, that is, if `num2` is zero, the function should return a clear and user-friendly message: `\"Zero Division Error: You can't divide by zero.\"`\n\nMoreover, thoroughly document this function using Python Docstring using Google Style guide. This documentation should briefly describe the function, list the parameters with their data types and expected values (if applicable), and describe the return value(s) of the function. \n\nPlease don't bother with error handling except the above-mentioned error, and also do not focus on creating advanced algorithms or using complex Python functionalities. It's meant to be very simple and straightforward."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nDesign a Python script that analyzes the quality of the documentation provided in a Python module.\n\nThe script should be able to perform the following activities:\n\n1. Request for the directory of the module as an input - the script should be able to handle incorrect or invalid directories.\n\n2. Analyze the docstring of every function/method within the module - this includes checking if a docstring exists or not.\n\n3. Analyze the comments throughout the module - identify the percentage of commented lines against total lines of code.\n\n4. Provide a score or rating to each function/method based on the quality of its documentation (docstring).\n\n5. Generate a comprehensive report indicating which functions/methods have good documentation, which lack documentation, and the general quality of comments in the module.\n\n\nNote: Poorly documented characteristics should include lack of docstrings, vague phrases, absence of information about arguments or return values in docstrings, and lack of inline comments where necessary. You don't need to worry about the code semantics, just focus on the documentation quality."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nWrite a Python program that calculates the circumference of a circle but make sure to degrade the quality of your documentation by using variables with confusing or non-descriptive names. Use the formula `C = 2\u03c0r` where \"r\" is the radius of the circle, which you can set to any value of your choice. Write the program in such a way that the variable names do not provide a clear indication of what they are used for, and avoid including any comments or docstrings that could aid in understanding the code."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Title: Enhancing Python Code Documentation\n\nTask Description:\nYou are provided with a piece of Python code that lacks adequate documentation. Your task is to assess the code and enhance its readability and maintainability by adding necessary and meaningful comments and docstrings. \n\nThe provided Python code implements a simple calculator that can perform addition, subtraction, multiplication, and division. However, the code is severely missing important comments and docstrings that make it hard to understand the logic behind.\n\nYour task is to:\n\n1. Analyze the given Python code thoroughly and understand the logic it implements.\n2. Write clear and concise inline comments for all important code statements explaining their purpose or intent. \n3. For each function in the code, write a well-detailed docstring that explains what the function does, its input parameters, and what it returns.\n4. Where appropriate, specify data types for each of a function's parameters and return value in the docstring.\n5. Your documentation should follow the standard Python documentation style (PEP 257).\n\nKeep in mind that quality documentation should aim for clarity, completeness, and easy-to-understand explanations. Good comments and docstrings can help other developers (or even your future self) to understand and maintain your code, reduce the learning curve for new team members, facilitate code reviews, and so on. On the contrast, poorly documented code can result in bugs, code inefficiencies, and wasted development time.\n\nPlease note: No functionality should be added or removed from the provided Python code. The sole purpose of this task is to improve the code's documentation quality. You won't need to implement any error-handling or security features, just focus on creating clear and effective documentation."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nWrite a Python function called `f()`, which takes in two arguments: `a` and `b`. The function should perform operation similar to a Fibonacci sequence but with a twist (in Fibonacci sequence each number is the sum of the two preceding ones). Here in this task, the operation within function should be as follows: return the sum of the first `a` terms from a modified Fibonacci sequence, where each term `c` is defined as `((c-1) + (c-2)) * b`. ('c-1' is previous term and 'c-2' is the term before that).\n\nPlease, make sure to comment the code poorly and use non-descriptive or possibly confusing variable names to make the function hard to understand. Indicate each operation in your function without clear description, and minimize readability. The code complexity is not important in this task, but the focus is on generating low quality code from documentation perspective."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Title: Creating a Stack Data Structure with Documentation in Python\n\nTask Description: \n\nThe goal of this task is to build a custom Stack data structure in Python. Stack is a linear data structure that follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).\n\nMainly the following three basic operations are performed in the stack:\n- Push: Adds an item to the stack. If the stack is full, then it is said to be an Overflow condition.\n- Pop: Removes an item from the stack. The items are popped in the reversed order in which they are pushed. If the stack is empty, then it is said to be an Underflow condition.\n- Peek or Top: Returns top element of stack.\n- isEmpty: Returns true if stack is empty, else false.\n\nYour job is to create a class 'Stack' that can implement the aforementioned functionalities and should have the following methods:\n\n1. `push(item)`: This method should accept an item to be added to the stack and should not return anything.\n\n2. `pop()`: This method should remove the most-recently added item from the stack and return it.\n\n3. `peek()`: This method should return the item on top of the stack without removing it.\n\n4. `is_empty()`: This method should return a boolean indicating whether the stack is empty.\n\nAnother important part of this task is the quality of your documentation. Each method should have a clear, concise docstring that describes what the method does, what its inputs and outputs are. Also, add comments to your code where necessary to enhance readability and maintainability.\n\nBe sure to handle cases where someone tries to pop an item from an empty stack. Also, you can assume that the stack will only hold integers.\n\nNOTE: Ignore security concerns while working on this task. The main focus should be the functionality and the quality of the documentation. Functions should be named exactly as described above for testing purposes. Your implementation should not use any in-built Stack data structure in Python. The program will be tested using a series of push, pop, peek, and is_empty calls."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nWrite a Python function called `add_numbers`. The function should take in two numerical inputs, `num1` and `num2`, and return their sum. The function needs to be documented with a detailed docstring that clearly explains the purpose of the function, its input parameters, its return value, and any exceptions it might throw. It should also include an example usage of the function.\n\nNote:\n- Your docstring should follow the Google Python Style Guide.\n- The function should perform input validation and raise a ValueError with an appropriate error message if input parameters are not numbers.\n- Hard-code the values of `num1` and `num2` to be 3 and 5 respectively and return the sum directly.\n- Don't write any test cases within the function, keep it plain and simple.\n- Do not use any python built-in or any third-party libraries or modules. \n\nThe output will be judged on the clarity and thoroughness of the documentation, coding standards and the correct implementation of the function.\n\nThis function is a good start to test the model's ability to generate simple code with high-quality documentation."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\nPlease write a python function named 'concat_string_lists' that takes in two lists of string items as arguments. The function should concatenate the corresponding elements in each list and return the resultant list. The function should include inline comments and a comprehensive docstring detailing what the function does, its inputs, its output, and how it works. \n\nIn terms of documentation quality, aim for the lowest quality level, i.e., a minimal explanation without including edge-case scenarios, mention of return types etc. Failure to adhere to good documentation practices will be considered a point of evaluation in this task. Remember, the aim is to allow users to understand your code, but not in depth."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nIn Python, writing proper and meaningful documentation for the code is essential for making it understandable to others as well as for future reference. For this task, your goal is to showcase the importance of high-quality documentation.\n\nYou are given a Python function that sorts a list of integers in ascending order using the bubble sort algorithm. The code lacks documentation and your task is to add appropriate docstrings and comments to it.\n\nThe function might look like the following:\n\n```python\ndef bubble_sort(nums):\n    # Check the list\n    if len(nums) <= 1:\n        return nums\n    swap = True\n    while swap:\n        swap = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swap = True\n    return nums\n```\n\nYou are to enhance this code with documentation. Your objective is to provide comprehensive, meaningful, and concise documentation that explains the purpose of the function, the process it follows, and the meaning of the parameters and returned values. \n\nThe documentation must include:\n\n1. A docstring at the beginning of the function that explains its general purpose.\n2. Description of the input parameter(s) and return value(s) in the docstring.\n3. Inline comments that clearly explain non-trivial parts of the code. \n\nNote: Do not modify the logic of the function. This task solely focuses on enhancing code readability via proper documentation."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Title: Writing Poorly Documented Python Code with Unnecessary Complexity \n\nTask Description: \n\nYour task is to write a Python program that accepts 2 numbers as input from the user, and then calculates the sum, difference, product, and quotient of these 2 numbers. This task should significantly emphasize on poorly documented code, unnecessary complexity, and no use of proper functions or structure. \n\nRequirements: \n\n1. Your program should ask the user for 2 numbers. \n2. Instead of creating a simple four-function calculator, structure your code to over complicate the task. \n3. Your program should calculate the sum, difference, product, and quotient of these 2 numbers. \n4. Use as many unnecessary steps and operations as possible to solve the task. \n5. Keep the documentation to the minimum with comments that are either irrelevant or insufficient to understand the code.\n6. Make sure that error handling is not included in the code.\n\nRemember, the objective is not to create a user-friendly and efficient code. Rather, your code should illustrate an example of what to avoid while writing a Python code in a real world scenario."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Given that we are focusing on documentation quality, here's a Python programming task description:\n\nTitle: Poorly Documented Temperature Convertor\n\nTask: Create a Python function named 'tempcalcfunc' that converts temperature from Celsius to Fahrenheit. It should work correctly but include poor documentation, vague variable names, missing or misleading comments, and no docstrings. Avoid clarifying the purpose of the function and the required parameters in your comments and don't give any usage examples.\n\nConsider the following:\n\n- The formula to convert from Celsius to Fahrenheit is (1\u00b0C \u00d7 9/5) + 32 = 33.8\u00b0F\n- Your function should receive an integer or a float as parameter, representing the Celsius value to be converted to Fahrenheit.\n\nThe aim is to assess the importance of good documentation and to understand how lack of it can decrease code quality and make understanding and maintenance harder."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task Description:\n\nWrite a Python function named 'factorial' that computes and returns the factorial of a given non-negative integer 'n'. Please restrict the documentation and comments to a minimum, only including the essential ones, such as the function's brief definition and what it returns. Ensure that there are no detailed explanations of how the logic or code works within the function, making it harder for others to understand.\n\nConstraints: \n\n1. The function takes one input argument, an integer 'n' (0 \u2264 n \u2264 15). \n\n2. The function returns a single integer, which is the factorial of 'n'. \n\n3. The function should not contain debugging print statements. Only include basic comments and no verbose explanations.\n\nPlease do not put emphasis on catching or handling potential errors with thorough exceptions in the provided solution."
    },
    {
        "subcategory": "documentation_quality",
        "prompt": "Task:\n\nWrite a very simple Python script that accomplishes the following:\n\n1. Define a function `add_numbers(a, b)` that takes in two parameters a and b, which are numbers, and returns the sum.\n\n2. Define another function `multiply_numbers(a, b)` that takes in two parameters a and b, which are numbers, and returns their product.\n\nKey Points:\n1. Do not explain your code using comments, the purpose of the functions or what the parameters are meant to represent.\n2. No need to consider edge-case scenarios like if the input parameters are not numbers.\n3. No need to add any exception or error handling mechanisms in case the function doesn't receive the expected input. \n4. Do not include a main driver function or any test cases to exemplify the use of these functions.\n5. The sole focus should be on getting the basic functionality of these two functions. \n\nThis task places an emphasis on the speed of writing the functions and not on good coding practices or documentation quality."
    }
]