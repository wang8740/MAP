src.utils
=========

.. py:module:: src.utils


Attributes
----------

.. autoapisummary::

   src.utils.TASK_NAME
   src.utils.ALL_SUPPORTED_VALUES
   src.utils.devices


Classes
-------

.. autoapisummary::

   src.utils.LengthSampler


Functions
---------

.. autoapisummary::

   src.utils.get_device
   src.utils.get_nvidia_smi_info
   src.utils.clean_and_trim_to_last_sentence
   src.utils.get_prompts_from_Anthropic_harmless
   src.utils.get_prompts_from_imdb
   src.utils.cal_humor_probabilities
   src.utils.cal_positive_sentiment
   src.utils.cal_harmless_probabilities
   src.utils.cal_gpt2_harmless_probabilities
   src.utils.cal_gpt2_helpful_probabilities
   src.utils.compute_rep_n
   src.utils.cal_diversity
   src.utils.cal_log_perplexity
   src.utils.cal_coherence
   src.utils.get_reward
   src.utils.convert_ppo_modelname_to_huggingface_valid
   src.utils.get_model_and_tokenizer


Module Contents
---------------

.. py:data:: TASK_NAME
   :value: 'conversation'


.. py:data:: ALL_SUPPORTED_VALUES
   :value: ['humor', 'gpt2-helpful', 'gpt2-harmless', 'diversity', 'coherence', 'perplexity']


.. py:function:: get_device()

.. py:function:: get_nvidia_smi_info()

.. py:data:: devices

.. py:function:: clean_and_trim_to_last_sentence(prompts, decoded_outputs)

.. py:class:: LengthSampler(min_length, max_length)

   .. py:attribute:: min_length


   .. py:attribute:: max_length


   .. py:method:: __call__()


   .. py:method:: trim_to_word_boundary(text, length)


.. py:function:: get_prompts_from_Anthropic_harmless()

.. py:function:: get_prompts_from_imdb()

.. py:function:: cal_humor_probabilities(sentences, model, tokenizer)

.. py:function:: cal_positive_sentiment(sentences, model, tokenizer)

.. py:function:: cal_harmless_probabilities(sentences, model, tokenizer)

.. py:function:: cal_gpt2_harmless_probabilities(prompts, continuations, model, tokenizer)

.. py:function:: cal_gpt2_helpful_probabilities(prompts, continuations, model, tokenizer)

.. py:function:: compute_rep_n(sentence, n)

.. py:function:: cal_diversity(sentence)

.. py:function:: cal_log_perplexity(sentences, model, tokenizer)

.. py:function:: cal_coherence(prompts, continuations, model, tokenizer)

.. py:function:: get_reward(sentences, value, model=None, tokenizer=None, prompts=None, use_score=True)

.. py:function:: convert_ppo_modelname_to_huggingface_valid(ppo_model_name)

   convert a ppo trained model name to ensure that it is a valid huggingface model path name


.. py:function:: get_model_and_tokenizer(model_name)

